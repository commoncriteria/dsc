<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>

<PP xmlns="https://niap-ccevs.org/cc/v1"
    xmlns:sec="https://niap-ccevs.org/cc/v1/section" 
    xmlns:h="http://www.w3.org/1999/xhtml" 

    target-products="Dedicated Security Components"
    boilerplate='yes'>
    <cPP/>
  <!-- <inline-comment color='green'> Hello World QQQQ </inline-comment> -->
  <!-- <inline-comment color='blue' linebreak='yes'> Hello World QQQQ </inline-comment> -->
  <PPReference>
    <ReferenceTable>
      <PPTitle>collaborative Protection Profile for Dedicated Security Component</PPTitle>
      <PPVersion>1.0</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2020-09-10</PPPubDate>
      <Keywords>QQQQ</Keywords>
    </ReferenceTable>
  </PPReference>

  <RevisionHistory>
    <entry>
      <version>1.0</version>
      <date>2020-09-10</date>
      <subject>First published release version.</subject>
    </entry>
  </RevisionHistory>

  <RevisionHistory>
    <entry>
      <version>1.0x</version>
      <date>2021-04-06</date>
      <subject>Start of first XML version.</subject>
    </entry>
  </RevisionHistory>

    <include-pkg id="tls">
      <raw-url>https://github.com/commoncriteria/tls/raw/
                        562626874aacfbb9beb397fca5be128c86ec4ebf
                        /input/tls.xml</raw-url>
		<url>https://www.niap-ccevs.org/Profile/Info.cfm?PPID=439&amp;id=439</url>
<!--               <depends on="pizza"/>  -->
	</include-pkg>
	    
    <include-pkg id="ssh">
                <raw-url>https://github.com/commoncriteria/ssh/raw/
                         de9b38dc426a4ac14d4016510d1ef477d419f7ae
                         /input/ssh.xml</raw-url>
      <url>https://www.niap-ccevs.org/Profile/Info.cfm?PPID=389&amp;id=389</url>
   </include-pkg>	


  <sec:Introduction title="PP introduction">
  
	<section title="PP Reference Identification">
		PP Reference: collaborative Protection Profile for Dedicated Security Component<h:p/>
		PP Version: 1.0<h:p/>
		PP Date: September 10, 2020<h:p/>
	</section>
	
    <section title="Overview" id="ppoverview">
      
      The scope of this Protection Profile (PP) is to
      describe the security functionality of QQQQ products in terms of <xref g='CC'/>
      and to define functional and assurance requirements for such products.
      </section>
	
    <tech-terms>
      <term abbr='AES' full="Advanced Encryption Standard"/>
      <term abbr='API' full="Application Programming Interface"/>
      <term full="Address Space Layout Randomization" abbr="ASLR">
	An anti-exploitation feature which loads memory mappings into unpredictable
	locations. ASLR makes it more difficult for an attacker to redirect control to code
	that they have introduced into the address space of a process.
      </term>
      <term full="Administrator">
	An administrator is responsible for management activities, including setting policies that are 
	applied by the enterprise on the operating system.
	This administrator could be acting remotely through a management server, from which the system
	receives configuration policies.
	An administrator can enforce settings on the system which cannot be overridden by non-administrator users.
      </term>
      <term full="Application" abbr="app">
	Software that runs on a platform and performs tasks on behalf of the user
	or owner of the platform, as well as its supporting documentation. 
      </term>
      <term full="Application Programming Interface" abbr="API">
	A specification of routines, data structures, object classes, and variables
	that allows an application to make use of services provided by another software
	component, such as a library. APIs are often provided for a set of libraries included
	with the platform.
      </term>
      <term abbr='CESG' full="Communications-Electronics Security Group"/>
      <term abbr='CMC' full="Certificate Management over CMS"/>
      <term abbr='CMS' full="Cryptographic Message Syntax"/>
      <term abbr='CN' full="Common Names"/>
      <term full="Credential">
	Data that establishes the identity of a user, e.g. a cryptographic key or
	password.
      </term>
      <term abbr='CRL' full="Certificate Revocation List"/>
      <term abbr='CSA' full="Computer Security Act"/>
      <term full="Critical Security Parameters" abbr="CSP">
	Information that is either user or system defined and
	is used to operate a cryptographic module in processing encryption functions including
	cryptographic keys and authentication data, such as passwords, the disclosure or modification
	of which can compromise the security of a cryptographic module or the security of the
	information protected by the module.
      </term>
      <term full="Data At Rest" abbr="DAR" />
      <term full="DAR Protection">
	Countermeasures that prevent attackers, even those with physical access,
	from extracting data from non-volatile storage.
	Common techniques include data encryption and wiping.
      </term>
      <term full="Data Execution Prevention" abbr="DEP">
	An anti-exploitation feature of modern operating systems executing on
	modern computer hardware, which enforces a non-execute permission on pages of memory.
	DEP prevents pages of memory from containing both data and instructions, which makes
	it more difficult for an attacker to introduce and execute code.
      </term>
      <term abbr='DES' full="Data Encryption Standard"/>
      <term full="Developer">
	An entity that writes OS software. For the purposes of this document,
	vendors and developers are the same.
      </term>
      <term full="General Purpose Operating System">
	A class of OSes designed to support a wide-variety of workloads consisting of many concurrent applications or services.
	Typical characteristics for OSes in this class include support for third-party applications,
	support for multiple users, and security separation between users and their respective resources.
	General Purpose Operating Systems also lack the real-time constraint that defines Real Time Operating Systems (RTOS).
	RTOSes typically power routers, switches, and embedded devices.
      </term>
      <term abbr='DHE' full="Diffie-Hellman Ephemeral"/>
      <term abbr='DNS' full="Domain Name System"/>
      <term abbr='DRBG' full="Deterministic Random Bit Generator"/>
      <term abbr='DSS' full="Digital Signature Standard"/>
      <term abbr='DT' full="Date/Time Vector"/>
      <term abbr='DTLS' full="Datagram Transport Layer Security"/>
      <term abbr='EAP' full="Extensible Authentication Protocol"/>
      <term abbr='ECDHE' full="Elliptic Curve Diffie-Hellman Ephemeral"/>
      <term abbr='ECDSA' full="Elliptic Curve Digital Signature Algorithm"/>
      <term abbr='EST' full="Enrollment over Secure Transport"/>
      <term abbr='FIPS' full="Federal Information Processing Standards"/>
      <term abbr='HMAC' full="Hash-based Message Authentication Code"/>
      <term full="Host-based Firewall">
	A software-based firewall implementation running on the OS for filtering inbound and
	outbound network traffic to and from processes running on the OS.
      </term>
      <term abbr='HTTP' full="Hypertext Transfer Protocol"/>
      <term abbr='HTTPS' full="Hypertext Transfer Protocol Secure"/>
      <term abbr='DSS' full="Digital Signature Standard"/>
      <term abbr='IETF' full="Internet Engineering Task Force"/>
      <term abbr='IP' full="Internet Protocol"/>
      <term abbr='ISO' full="International Organization for Standardization"/>
      <term abbr='IT' full="Information Technology"/>
      <term abbr='ITSEF' full="Information Technology Security Evaluation Facility"/>
      <term abbr='NIAP' full="National Information Assurance Partnership"/>
      <term abbr='NIST' full="National Institute of Standards and Technology"/>
      <term abbr='OCSP' full="Online Certificate Status Protocol"/>
      <term abbr='OID' full="Object Identifier"/>
      <term abbr='OMB' full="Office of Management and Budget"/>
      <term full="Operating System" abbr="OS" plural="OSes">
	Software that manages physical and logical resources and provides services
	for applications. The terms <h:i>TOE</h:i> and <h:i>OS</h:i> are interchangeable in this
	document. 
      </term>
      <term abbr='PKI' full="Public Key Infrastructure"/>
      <term abbr='PP' full="Protection Profile"/>
      <term abbr='RBG' full="Random Bit Generator"/>
      <term abbr='RFC' full="Request for Comment"/>
      <term abbr='RNG' full="Random Number Generator"/>
      <term abbr='RNGVS' full="Random Number Generator Validation System"/>
      <term full="Personally Identifiable Information" abbr="PII">
	Any information about an individual maintained by an agency, including, but
	not limited to, education, financial transactions, medical history, and criminal or
	employment history and information which can be used to distinguish or trace an
	individual's identity, such as their name, social security number, date and place of
	birth, mother's maiden name, biometric records, etc., including any other personal
	information which is linked or linkable to an individual.<xref to="bibOMB"/>
      </term>
      <term abbr='SAN' full="Subject Alternative Name"/>
      <term abbr='SHA' full="Secure Hash Algorithm"/>
      <term abbr='S/MIME' full="Secure/Multi-purpose Internet Mail Extensions"/>
      <term full="Sensitive Data">
	Sensitive data may include all user or enterprise data or may be specific
	application data such as PII, emails, messaging, documents, calendar items, and contacts.
	Sensitive data must minimally include credentials and keys. Sensitive data shall
	be identified in the OS's TSS by the ST author. 
      </term>
      <term abbr='SIP' full="Session Initiation Protocol"/>
      <term abbr='SWID' full="Software Identification"/>
      <term abbr='TLS' full="Transport Layer Security"/>
      <term abbr='URI' full="Uniform Resource Identifier"/>
      <term abbr='URL' full="Uniform Resource Locator"/>
      <term abbr='USB' full="Universal Serial Bus"/>
      <term full="User">
	A user is subject to configuration policies applied
	to the operating system by administrators.  On some systems under certain
	configurations, a normal user can temporarily elevate privileges to that of an administrator.
	At that time, such a user should be considered an administrator.
      </term>
	  <term abbr="VM" full="Virtual Machine">Blah Blah Blah</term>
      <term abbr='XCCDF' full="eXtensible Configuration Checklist Description Format"/>
      <term abbr='XOR' full="Exclusive Or"/>
    </tech-terms>    
    <section title="Compliant Targets of Evaluation" id="TOEdescription">
      <section title="TOE Boundary" id="TOEboundary">
        <figure entity="images/Toe.png" title="General TOE " id="toe"/>
      </section>
      <section title="TOE Platform" id="TOEplatform">
      </section>
    </section>
    <section title="Use Cases" id="usecases">Requirements in this Protection Profile are designed to
      address the security problems in at least the following use cases. These use cases are intentionally
      very broad, as many specific use cases exist for an operating system. These use cases may also
      overlap with one another.  An operating system's functionality may even be effectively extended by
      privileged applications installed onto it.  However, these are out of scope of this PP. 
      <usecases>
	  
	  
      <usecase title="Elephant-own device" id="elephant">
        <description>This is everything we need to describe in words about this use case.</description>	
	  <config>
	  </config>
      </usecase>
      </usecases>
    </section>
  </sec:Introduction>

  <sec:cclaims title="Conformance Claims"/>
  <sec:spd title="Security Problem Description">The security problem is described in terms
    of the threats that the OS is expected to address, assumptions about the
    operational environment, and any organizational security policies that the OS
    is expected to enforce.
    <sec:Threats>
      <threats>
        <threat name="T.NETWORK_ATTACK">
          <description> An attacker is positioned on a communications channel or elsewhere on the
            network infrastructure. Attackers may engage in communications with applications and
            services running on or part of the OS with the intent of compromise. Engagement may
            consist of altering existing legitimate communications.</description>
          <objective-refer ref="O.PROTECTED_COMMS">
            <rationale>The threat T.NETWORK_ATTACK is countered by O.PROTECTED_COMMS as this
              provides for integrity of transmitted data.</rationale>
          </objective-refer>
          <objective-refer ref="O.INTEGRITY">
            <rationale>The threat T.NETWORK_ATTACK is countered by O.INTEGRITY as this provides for
              integrity of software that is installed onto the system from the network.</rationale>
          </objective-refer>
          <objective-refer ref="O.MANAGEMENT">
            <rationale>The threat T.NETWORK_ATTACK is countered by O.MANAGEMENT as this provides for
              the ability to configure the OS to defend against network attack.</rationale>
          </objective-refer>
          <objective-refer ref="O.ACCOUNTABILITY">
            <rationale>The threat T.NETWORK_ATTACK is countered by O.ACCOUNTABILITY as this
              provides a mechanism for the OS to report behavior that may indicate a network
              attack has occurred.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.NETWORK_EAVESDROP">
          <description> An attacker is positioned on a communications channel or elsewhere on the
            network infrastructure. Attackers may monitor and gain access to data exchanged between
            applications and services that are running on or part of the OS. </description>
          <objective-refer ref="O.PROTECTED_COMMS">
            <rationale>The threat T.NETWORK_EAVESDROP is countered by O.PROTECTED_COMMS as this
              provides for confidentiality of transmitted data.</rationale>
          </objective-refer>
          <objective-refer ref="O.MANAGEMENT">
            <rationale>The threat T.NETWORK_EAVESDROP is countered by O.MANAGEMENT as this provides
              for the ability to configure the OS to protect the confidentiality of its transmitted
              data.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.LOCAL_ATTACK">
          <description> An attacker may compromise applications running on the OS. The
            compromised application may provide maliciously formatted input to the OS through a
            variety of channels including unprivileged system calls and messaging via the
            file system. </description>
          <objective-refer ref="O.INTEGRITY">
            <rationale>The objective O.INTEGRITY protects against the use of mechanisms that weaken
              the TOE with regard to attack by other software on the
              platform.</rationale>
          </objective-refer>
          <objective-refer ref="O.ACCOUNTABILITY">
            <rationale>The objective O.ACCOUNTABILITY protects against local attacks by providing
              a mechanism to report behavior that may indicate a local attack is occurring or
              has occurred.</rationale>
          </objective-refer>
        </threat>
        <threat name="T.LIMITED_PHYSICAL_ACCESS">
          <description> An attacker may attempt to access data on the OS while having a limited
            amount of time with the physical device. </description>
          <objective-refer ref="O.PROTECTED_STORAGE">
            <rationale>The objective O.PROTECTED_STORAGE protects against unauthorized attempts to
              access physical storage used by the TOE.</rationale>
          </objective-refer>
        </threat>
      </threats>
    </sec:Threats>
    <section title="Assumptions" id="assumptions">
      <assumptions>
        <assumption name="A.PLATFORM">
          <description> The OS relies upon a trustworthy computing platform for
            its execution. This underlying platform is out of scope of this PP. </description>
          <objective-refer ref="OE.PLATFORM">
            <rationale> The operational environment objective OE.PLATFORM is realized through
              A.PLATFORM. </rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.PROPER_USER">
          <description> The user of the OS is not willfully negligent or hostile, and uses the
            software in compliance with the applied enterprise security policy. At the same time,
            malicious software could act <h:i>as</h:i> the user, so requirements which
            confine malicious subjects are still in scope.</description>
          <objective-refer ref="OE.PROPER_USER">
            <rationale>The operational environment objective OE.PROPER_USER is realized through
              A.PROPER_USER.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.PROPER_ADMIN">
          <description> The administrator of the OS is not careless, willfully negligent or hostile,
            and administers the OS within compliance of the applied enterprise security policy. </description>
          <objective-refer ref="OE.PROPER_ADMIN">
            <rationale>The operational environment objective OE.PROPER_ADMIN is realized through
              A.PROPER_ADMIN.</rationale>
          </objective-refer>
        </assumption>
      </assumptions>
    </section>
<!--    <section title="Organizational Security Policies" id="OSPs">
      <OSPs>
        <OSP id="P.ENTERPRISE">
          <description>If the OS is bound to a directory or management server, the configuration of
            the OS software must be capable of adhering to the enterprise security policies
            distributed by them.</description>
          <objective-refer ref="O.MANAGEMENT">
            <rationale>The organizational security policy P.ENTERPRISE is enforced through the
              objective O.MANAGEMENT as this objective represents how the enterprise and user assert
              management over the OS.</rationale>
          </objective-refer>
        </OSP>
      </OSPs>
    </section> -->
  </sec:spd>
  <sec:Security_Objectives>
    <section title="Security Objectives for the TOE" id="SecurityObjectivesTOE">
      <SOs>
        <SO name="O.ACCOUNTABILITY">
          <description> Conformant OSes ensure that information exists that allows
            administrators to discover unintentional issues with the configuration and operation of
            the operating system and discover its cause.  Gathering event information and immediately
            transmitting it to another system can also enable incident response in the event
            of system compromise.</description>
          <addressed-by>FAU_GEN.1</addressed-by><rationale>'cause FAU_GEN.1 is awesome</rationale>
          <addressed-by>FTP_ITC_EXT.1</addressed-by><rationale>Cause FTP reasons </rationale>
        </SO>
        <SO name="O.INTEGRITY">
          <description>Conformant OSes ensure the integrity of their update
            packages. OSes are seldom if ever shipped without errors, and the
            ability to deploy patches and updates with integrity is critical to enterprise network
            security. Conformant OSes provide execution environment-based
            mitigations that increase the cost to attackers by adding complexity to the task of
            compromising systems. </description>
            <addressed-by>FPT_SBOP_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_ASLR_EXT.1</addressed-by><rationale>ASLR For reasons </rationale>
            <addressed-by>FPT_TUD_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_TUD_EXT.2</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FCS_COP.1/HASH</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FCS_COP.1/SIGN</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FCS_COP.1/KEYHMAC</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_ACF_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_SRP_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FIA_X509_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_TST_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FTP_ITC_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FPT_W^X_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FIA_AFL.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FIA_UAU.5</addressed-by><rationale>For reasons </rationale>
        </SO>
        <SO name="O.MANAGEMENT">
          <description> To facilitate management by users and the enterprise, conformant OSes
	    provide consistent and supported interfaces for their
            security-relevant configuration and maintenance. This includes the deployment of
            applications and application updates through the use of platform-supported deployment
            mechanisms and formats, as well as providing mechanisms for configuration and
            application execution control. </description>
            <addressed-by>FMT_MOF_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FMT_SMF_EXT.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FTA_TAB.1</addressed-by><rationale>For reasons </rationale>
            <addressed-by>FTP_TRP.1</addressed-by><rationale>For reasons </rationale>
        </SO>
	<!-- <SO id="O.RESILIENCE"> -->
	<!--   <description>  -->
	<!--     To address the issue of exploitation in the event of software vulnerabilities,  -->
	<!--     conformant OSs employ industry-standard exploitation countermeasures. -->
	<!--   </description> -->
	<!-- </SO> -->
        <SO name="O.PROTECTED_STORAGE">
          <description>
To address the issue of loss of confidentiality of credentials in the event of
loss of physical control of the storage medium, conformant OSes
provide data-at-rest protection for credentials.
Conformant OSes also provide access controls which allow users to keep their files private from other
users of the same system.
          </description>
          <addressed-by>FCS_STO_EXT.1, FCS_RBG_EXT.1, FCS_COP.1/ENCRYPT, FDP_ACF_EXT.1</addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
        <SO name="O.PROTECTED_COMMS">
          <description> To address both passive (eavesdropping) and active (packet modification)
            network attack threats, conformant OSes provide mechanisms to create
            trusted channels for CSP and sensitive data. Both CSP and sensitive data
            should not be exposed outside of the platform. </description>
          <addressed-by>
            FCS_RBG_EXT.1, FCS_CKM.1, FCS_CKM.2, FCS_CKM_EXT.4, FCS_COP.1/ENCRYPT,
            FCS_COP.1/HASH, FCS_COP.1/SIGN, FCS_COP.1/HMAC, FDP_IFC_EXT.1, FIA_X509_EXT.1,
            FIA_X509_EXT.2, FTP_ITC_EXT.1
          </addressed-by>
          <rationale>Rationale for a big chunk</rationale>
        </SO>
      </SOs>
    </section>
    <section title="Security Objectives for the Operational Environment"
      id="SecurityObjectivesTOEorEnvironment">The following security objectives for the operational
      environment assist the OS in correctly providing its security functionality.
      These track with the assumptions about the environment. <SOEs>
        <SOE name="OE.PLATFORM">
          <description>The OS relies on being installed on trusted
            hardware.</description>
        </SOE>
        <SOE name="OE.PROPER_USER">
          <description> The user of the OS is not willfully negligent or hostile,
            and uses the software within compliance of the applied enterprise security policy.
            Standard user accounts are provisioned in accordance with the least privilege model.
            Users requiring higher levels of access should have a separate account dedicated for
            that use. </description>
        </SOE>
        <SOE name="OE.PROPER_ADMIN">
          <description> The administrator of the OS is not careless, willfully
            negligent or hostile, and administers the OS within compliance of the applied enterprise
            security policy. </description>
        </SOE>
      </SOEs></section>
    <section title="Security Objectives Rationale" id="SOR">
      <!-- This section is populated by boilerplates.xsl in transforms. -->
      </section>
  </sec:Security_Objectives>

  <sec:Security_Requirements>
    <sec:SFRs title="Security Functional Requirements">
	  
	  <section title="Cryptographic Support (FCS)" id="fcs">

	<f-component cc-id="fcs_ckm.1" name="Cryptographic Key Generation">
		<f-element id="fcs-ckm-1e1">
			<title>The TSF shall generate cryptographic keys by [<h:i>parsing in accordance with
				FDP_ITC_EXT.1 and FDP_ITC_EXT.2,</h:i>
				<selectables>
					<selectable>asymmetric key generation in accordance with FCS_CKM.1/AK</selectable>
					<selectable>symmetric key generation in accordance to FCS_CKM.1/SK</selectable>
					<selectable>no other methods</selectable>
				</selectables> <h:s>in accordance with a specified cryptographic key generation algorithm 
				[assignment: <h:i>cryptographic key generation algorithm</h:i>]
				and specified cryptographic key sizes 
				[assignment: <h:i>cryptographic key sizes</h:i>]
				that meet the following: [assignment: <h:i>list of standards</h:i>]</h:s>.
			</title>
		<note role="application">
			Parsing of keys can refer to both the act of importing keys from outside the TOE boundary and to
			the act of issuing commands or parameters to the TOE that trigger the TSF to perform a key
			generation function.<h:p/>
			If asymmetric key generation in accordance with FCS_CKM.1/AK is selected, the selection-based
			SFR FCS_CKM.1/AK must be claimed by the TOE.<h:p/>
			If symmetric key generation in accordance with FCS_CKM.1/SK is selected, the selection-based
			SFR FCS_CKM.1/SK must be claimed by the TOE.<h:p/>	  
		</note>
		<aactivity>
			<TSS>
				The evaluator shall examine the TSS to verify that it describes how the TOE obtains
				a cryptographic key through importation of keys from external sources as specified
				in FDP_ITC_EXT.1 and FDP_ITC_EXT.2. The evaluator shall also examine the
				TSS to determine whether it describes any supported asymmetric or symmetric key
				generation functionality consistent with the claims made in FCS_CKM.1.1.
			</TSS>
			<Guidance>
				The evaluator shall verify that the guidance instructs the administrator how to
				configure the TOE to use the selected key types for all uses identified in the ST.
			</Guidance>
			<KMD>
				The evaluator shall confirm that the KMD describes:<h:ul>
				<h:li>The parsing interface and how the TSF imports keys for internal use</h:li>
				<h:li>The asymmetric key generation interfaces and how the TSF internally creates
					asymmetric keys, if claimed</h:li>
				<h:li>The symmetric key generation interfaces and how the TSF internally creates
					symmetric keys, if claimed</h:li></h:ul><h:p/>
				If the TOE uses the generated key in a key chain/hierarchy then the KMD shall
				describe how the key is used as part of the key chain/hierarchy. 
			</KMD>
			<Tests>
				Testing for this function is performed in conjunction with FDP_ITC_EXT.1 and
				FDP_ITC_EXT.2. If asymmetric or symmetric key generation functionality is
				claimed, testing for this function is also performed in conjunction with
				FCS_CKM.1/AK or FCS_CKM.1/SK.
			</Tests>
		</aactivity>
		</f-element>
	</f-component>
		  
		<f-component cc-id="fcs_ckm.1" iteration="AK" name="Cryptographic Key Generation (Asymmetric Keys)">
<!--			<exportable id="inf-dsc-fcs-ckm-ak"/> -->
			<f-element id="fcs-ckm-1e1-ak">
				<title>The TSF shall generate <h:b>asymmetric</h:b> cryptographic keys using the methods defined by 
					the following rows in <xref to="fcs-ckm-1-ak-sels"/>:
					<!-- [selection: identifier from Supported Methods for Asymmetric Key Generation table] --> 
					<selectables>
						<selectable id="sel-fcs-ckm-ak-ak1">AK1</selectable>
						<selectable id="sel-fcs-ckm-ak-ak2">AK2</selectable>
						<selectable id="sel-fcs-ckm-ak-ak3">AK3</selectable>
						<selectable id="sel-fcs-ckm-ak-ak4">AK4</selectable>
						<selectable id="sel-fcs-ckm-ak-ak5">AK5</selectable>
					</selectables>.<h:p/>
<!--					and specified cryptographic key sizes [<h:i>key sizes as chosen from Supported Methods for
					Asymmetric Key Generation table for corresponding key types</h:i>] that meet the following: 
					[<h:i>standards	as chosen from Supported Methods for Asymmetric Key Generation table for 
					corresponding key types</h:i>].<h:p/>  -->
					<h:b><ctr ctr-type='Table' id="fcs-ckm-1-ak-sels">: Supported Methods for Asymmetric Key Generation</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Key Type</h:td><h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak1"/>
						<h:td>AK1</h:td>
						<h:td>RSA</h:td>
						<h:td><selectables>
							<selectable id="sel-exp-ak-rsa-2048">2048 bit</selectable>
							<selectable id="sel-exp-ak-rsa-3072">3072-bit</selectable></selectables></h:td>
						<h:td>FIPS PUB 186-4 (Section B.3)</h:td></h:tr>
						
						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak2"/>
						<h:td>AK2</h:td>
						<h:td>ECC-N</h:td>
						<h:td><selectables>
							<selectable id="sel-exp-ak-eccn-P256">256 (P-256)</selectable>
							<selectable id="sel-exp-ak-eccn-P384">384 (P-384)</selectable>
							<selectable id="sel-exp-ak-eccn-P521">521 (P-521)</selectable></selectables></h:td>
						<h:td>FIPS PUB 186-4 (Section B.4 &amp; D.1.2)</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak3"/>
						<h:td>AK3</h:td>
						<h:td>ECC-B</h:td>
						<h:td><selectables>
							<selectable id="sel-exp-ak-ecc-bpP256r1">256 (brainpoolP256r1)</selectable>
							<selectable id="sel-exp-ak-ecc-bpP384r1">384 (brainpoolP384r1)</selectable>
							<selectable id="sel-exp-ak-ecc-bpP512r1">512 (brainpoolP512r1)</selectable></selectables></h:td>
						<h:td>RFC5639 (Section 3) (Brainpool Curves)</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak4"/>
						<h:td>AK4</h:td>
						<h:td>DSA</h:td>
						<h:td>DSA Bit lengths of p and q respectively (L, N) 
							<selectables>
								<selectable id="sel-exp-ak-dsa-1024-160">(1024, 160)</selectable>
								<selectable id="sel-exp-ak-dsa-2048-224">(2048, 224)</selectable>
								<selectable id="sel-exp-ak-dsa-2048-256">(2048, 256)</selectable>
								<selectable id="sel-exp-ak-dsa-3027-256">(3027, 256)</selectable></selectables></h:td>
						<h:td>FIPS 186-4 Appendix B.1</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-ak-ak5"/>
						<h:td>AK5</h:td>
						<h:td>Curve25519</h:td>
						<h:td>256 bits</h:td>
						<h:td>RFC 7748</h:td></h:tr>
					</h:table>
				</title>
				<note role="application">					
					This requirement is included for the purposes of encryption and decryption operations only. To
					support ITE protected communications requirement for the transfer of encrypted data, this 
					requirement mandates implementation compliance to FIPS 186-4 only. Implementations
					according to FIPS 186-2 or FIPS 186-3 will not be accepted.<h:p/>
					This requirement must be claimed by the TOE if at least one of FCS_CKM.1 or FCS_CKM.1/KEK
					chooses a selection related to generation of asymmetric keys.
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>
	  
		<f-component cc-id="fcs_ckm.1" iteration="SK" name="Cryptographic Key Generation (Symmetric Encryption Key)">
<!--			<exportable id="inf-dsc-fcs-ckm-sk"/> -->
			<f-element id="fcs-ckm-1e1-sk">
				<title>The TSF shall generate <h:b>symmetric</h:b> cryptographic keys using the methods defined by 
					the following rows in <xref to="fcs-ckm-1-sk-sels"/>:
				<!-- [selection: identifier from Supported Methods for Symmetric Encryption Key Generation table] -->
					<selectables>
						<selectable id="sel-fcs-ckm-sk-rsk">RSK</selectable>
						<selectable id="sel-fcs-ckm-sk-dsk">DSK</selectable>
						<selectable id="sel-fcs-ckm-sk-pbk">PBK</selectable>
					</selectables>.<h:p/>
					<h:b><ctr ctr-type='Table' id="fcs-ckm-1-sk-sels">: Supported Methods for Symmetric Key Generation</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Key Type</h:td>
							<h:td>Cryptographic Key Generation Algorithm</h:td><h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-sk-rsk"/>
							<h:td>RSK</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>submask</selectable>
							<selectable>authorization value</selectable></selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							<selectable>512</selectable></selectables> bits</h:td>
						<h:td>NIST SP 800-133 (Section 7.1) with ISO 18031 as an approved RBG in addition
							to those in NIST SP 800-133 (Section 5).</h:td></h:tr>
							
						<h:tr><depends on-sel="sel-fcs-ckm-sk-dsk"/>
							<h:td>DSK <selectables> 
							<selectable>identifier from Table 16: Key Derivation Functions</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>Key Type from Table 16: Key Derivation Functions</selectable></selectables></h:td>
						<h:td>Derived from a Key Derivation Function as specified in FCS_CKM_EXT.5 
							<selectables>
								<selectable>Key Derivation Algorithm from Table 16: Key Derivation Function</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>key sizes from Table 16: Key Derivation Functions</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>List of Standards from Table 16: Key Derivation Functions</selectable></selectables></h:td></h:tr>
						
						<h:tr><depends on-sel="sel-fcs-ckm-sk-pbk"/>
							<h:td>PBK</h:td>
						<h:td><selectables>
							<selectable>submask</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable></selectables></h:td>
						<h:td>Derived from a Password Based Key Derivation Function as specified in FCS_COP.1/PBKDF</h:td>
						<h:td><selectables>
							<selectable>key sizes as specified in FCS_COP.1/PBKDF</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>standards as specified in FCS_COP.1/PBKDF</selectable></selectables></h:td></h:tr>
					</h:table>
				</title>
				<note role="application">
					The intent of this requirement is to ensure that attackers cannot recover SKs with less than a full
					exhaust of the key space. This requirement explains SK generation regardless of how the DSC uses
					it or when it generates it. The encryption of user data that is not keying material, authentication
					tokens, or authorization values is outside the scope of this cPP. This cPP assumes that the DSC
					lacks the required resources to perform bulk encryption/decryption services at a suitable rate for
					users. The host may use the SK for encrypting user data outside the boundaries of the DSC. On
					the other hand, the DSC may use the SK on behalf of the user to perform keyed hashes. In this
					case, all the requirements for generating, controlling access and use, and destroying the key while
					under the protection of the DSC apply.<h:p/>
					The selection of key size 512 bits is for the case of XTS-AES using AES-256. In the case of XTSAES
					for both AES-128 and AES-256, the developer is expected to ensure that the full key is
					generated using direct generation from the RBG as in NIST SP 800-133 section.<h:p/>
					The ST author selects at least one algorithm from the RSK row if the ST supports creating keys
					directly from the output of the RBG without further conditioning, at least one algorithm from the
					DSK row should be selected if the ST supports key derivation functions which are usually seeded
					from RBG and then further conditioned to the appropriate key size, and at least one algorithm
					from the PBK row should be selected if the ST supports keys derived from passwords.<h:p/>
					If DSK is selected, the selection-based SFR FCS_CKM_EXT.5 must be claimed by the TOE.<h:p/>
					If PBK is selected, the selection-based SFR FCS_COP.1/PBKDF must be claimed by the TOE.<h:p/>
					This requirement must be claimed by the TOE if at least one of FCS_CKM.1 or FCS_CKM.1/KEK
					chooses a selection related to generation of symmetric keys.<h:p/>
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>
	  
		<!-- FCS_CKM.1/KEK Cryptographic Key Generation (Key Encryption Key)  -->
		<f-component cc-id="fcs_ckm.1" iteration="KEK" name="Cryptographic Key Generation (Key Encryption Key)">
<!--			<exportable id="inf-dsc-fcs-ckm-kek"/>  -->
			<f-element id="fcs-ckm-1e1-kek">
				<title>The TSF shall generate key encryption keys in accordance with a specified
					cryptographic key generation algorithm corresponding to 
					<selectables linebreak="yes">
						<selectable>Asymmetric KEKs generated in accordance with FCS_CKM.1/AK identifier AK1</selectable>
						<selectable>Symmetric KEKs generated in accordance with FCS_CKM.1/SK</selectable>
						<selectable>Derived KEKs generated in accordance with FCS_CKM_EXT.5</selectable>
					</selectables>
					and specified cryptographic key sizes <assignable>cryptographic key sizes</assignable> that meet the
					following: <assignable>list of standards</assignable>.
				</title>
				<note role="application">
					KEKs protect KEKs and Symmetric Keys (SKs). DSCs should use key strengths commensurate
					with protecting the chosen symmetric encryption key strengths.<h:p/>
					If Asymmetric KEKs generated in accordance with FCS_CKM.1/AK is selected, the selection-based
					SFR FCS_CKM.1/AK must be claimed by the TOE.<h:p/>
					If Symmetric KEKs generated in accordance with FCS_CKM.1/SK is selected, the selection-based
					SFR FCS_CKM.1/SK must be claimed by the TOE.<h:p/>
					If Derived KEKs generated in accordance with FCS_CKM_EXT.5 is selected, the selection-based
					SFR FCS_CKM_EXT.5 must be claimed by the TOE.<h:p/>
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the key hierarchy section of the TSS to ensure that the
						formation of all KEKs is described and that the key sizes match that described by
						the ST author. The evaluator shall examine the key hierarchy section of the TSS to
						ensure that each KEK encrypts keys of equal or lesser security strength using one
						of the selected methods.<h:p/>
						[conditional] If the KEK is generated according to an asymmetric key scheme, the
						evaluator shall review the TSS to determine that it describes how the functionality
						described by FCS_CKM.1/AK is invoked. The evaluator uses the description of the
						key generation functionality in FCS_CKM.1/AK or documentation available for the
						operational environment to determine that the key strength being requested is
						greater than or equal to 112 bits.<h:p/>
						[conditional] If the KEK is generated according to a symmetric key scheme, the
						evaluator shall review the TSS to determine that it describes how the functionality
						described by FCS_CKM.1/SK is invoked. The evaluator uses the description of the
						RBG functionality in FCS_RBG_EXT.1, or the key derivation functionality in
						either FCS_CKM_EXT.5 or FCS_COP.1/PBKDF, depending on the key
						generation method claimed, to determine that the key size being requested is greater
						than or equal to the key size and mode to be used for the encryption/decryption of
						the data.<h:p/>
						[conditional] If the KEK is formed from derivation, the evaluator shall verify that
						the TSS describes the method of derivation and that this method is consistent with
						FCS_CKM_EXT.5.<h:p/>
					</TSS>
					<Guidance>
						There are no guidance evaluation activities for this component.
					</Guidance>
					<KMD>
						The evaluator shall iterate through each of the methods selected by the ST and
						confirm that the KMD describes the applicable selected methods.
					</KMD>
					<Tests>
						The evaluator shall iterate through each of the methods selected by the ST and
						perform all applicable tests from the selected methods.
					</Tests>
				</aactivity>
			</f-element>
			<audit-event/>		
		</f-component>
		
		<f-component cc-id="fcs_ckm.2" name="Cryptographic Key Establishment">
<!--			<exportable id="inf-dsc-fcs-ckm-est"/>   -->
			<f-element id="fcs-ckm-2e1">
				<title>The TSF shall establish cryptographic keys in accordance with a specified
					cryptographic key establishment method: 
					<selectables linebreak="yes">
						<selectable>RSA-based key establishment schemes that meet the following: NIST Special
							Publication 800-56B Revision 2, “Recommendation for Pair-Wise Key Establishment
							Schemes Using Integer Factorization Cryptography”</selectable>
						<selectable>RSA-based key establishment schemes that meet the following: RSAES-PKCS1-v1_5
							as specified in Section 7.2 of RFC 8017, “Public-Key Cryptography Standards
							(PKCS) #1: RSA Cryptography Specifications Version 2.2”</selectable>
						<selectable>Elliptic curve-based key establishment schemes that meet the following: 
							<selectables linebreak="yes">
								<selectable>NIST Special Publication 800-56A Revision 3, “Recommendation for Pair-Wise
									Key Establishment Schemes Using Discrete Logarithm Cryptography”</selectable>
								<selectable>RFC 7748, “Elliptic Curves for Security”</selectable>
							</selectables></selectable>
						<selectable>Finite field-based key establishment schemes that meet the following: NIST Special
							Publication 800-56A Revision 3, “Recommendation for Pair-Wise Key Establishment
							Schemes Using Discrete Logarithm Cryptography”</selectable>
						<selectable>Elliptic Curve Integrated Encryption Scheme (ECIES) that meets the following:
							<selectables linebreak="yes">
								<selectable>ANSI X9.63 - Public Key Cryptography for the Financial Services Industry
									Key Agreement and Key Transport Using Elliptic Curve Cryptography</selectable>
								<selectable>IEEE 1363a - Standard Specification for Public-Key Cryptography -
									Amendment 1: Additional Techniques</selectable>
								<selectable>ISO/IEC 18033-2 - Information Technology - Security Techniques -
									Encryption Algorithms - Part 2: Asymmetric Ciphers</selectable>
								<selectable>SECG SEC1 - Standards for Efficient Cryptography Group Elliptic Curve
									Cryptography, section 5.1 Elliptic Curve Integrated Encryption Scheme</selectable>
							</selectables></selectable>
					</selectables> <h:s>that meets the following: [<h:i>assignment: list of standards</h:i>]</h:s>.
				</title>
				<note role="application">
					This is a refinement of the SFR FCS_CKM.2 to deal with key establishment rather than key
					distribution.<h:p/>
					The ST author selects all key establishment schemes used for the selected cryptographic protocols.<h:p/>
					The RSA-based key establishment schemes are described in Section 8 of NIST SP 800-56B Revision
					2 [NIST-RSA]; however, Section 8 relies on implementation of other sections in SP 800-56B Revision 2.<h:p/>
					The elliptic curves used for the key establishment scheme correlate with the curves specified in
					FCS_CKM.1/AK.<h:p/>
					The selections in this SFR must be consistent with those for FCS_COP.1/KAT.<h:p/>
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the TSS to ensure that ST supports at least one key
						establishment scheme. The evaluator also ensures that for each key establishment
						scheme selected by the ST in FCS_CKM.2.1 it also supports one or more
						corresponding methods selected in FCS_COP.1/KAT. If the ST selects RSA in
						FCS_CKM.2.1, then the TOE must support one or more of “KAS1,” or “KAS2,”
						“KTS-OAEP,” from FCS_COP.1/KAT. If the ST selects elliptic curve-based, then
						the TOE must support one or more of “ECDH-NIST” or “ECDH-BPC” from
						FCS_COP.1/KAT. If the ST selects Diffie-Hellman-based key establishment, then
						the TOE must support “DH” from FCS_COP.1/KAT.<h:p/>
					</TSS>
					<Guidance>
						The evaluator shall verify that the guidance instructs the administrator how to
						configure the TOE to use the selected key establishment scheme.
					</Guidance>
					<KMD>
						There are no KMD evaluation activities for this component.
					</KMD>
					<Tests>
						Testing for this SFR is performed under the corresponding functions in
						FCS_COP.1/KAT.
					</Tests>
				</aactivity>
			</f-element>
		</f-component>
		
	<f-component cc-id="fcs_ckm.4" name="Cryptographic Key Destruction">
		<f-element id="fcs-ckm-4e1">
			<title>The TSF shall destroy cryptographic keys and keying material in accordance
				with a specified cryptographic key destruction method 
					<h:ul><h:li>For volatile memory, the destruction shall be executed by a 
						<selectables linebreak="yes">
							<selectable>single overwrite consisting of 
								<selectables>
									<selectable>a pseudo-random pattern using the TSF’s RBG</selectable>
									<selectable>zeroes</selectable>
									<selectable>ones</selectable>
									<selectable>a new value of a key</selectable>
									<selectable><assignable>some value that does not contain any CSP</assignable></selectable>
								</selectables></selectable>
							<selectable>removal of power to the memory</selectable>
							<selectable>removal of all references to the key directly followed by a request for garbage
								collection</selectable>
						</selectables></h:li>
					<h:li>For non-volatile memory 
						<selectables linebreak="yes">
							<selectable>that employs a wear-leveling algorithm, the destruction shall be executed by a
								<selectables>
									<selectable>single overwrite consisting of 
										<selectables>
											<selectable>zeroes</selectable>
											<selectable>ones</selectable>
											<selectable>pseudo-random pattern</selectable>
											<selectable>a new value of a key of the same size</selectable>
											<selectable><assignable>some value that does not contain any CSP</assignable></selectable>
										</selectables></selectable>
									<selectable>block erase</selectable>
								</selectables></selectable>
							<selectable>that does not employ a wear-leveling algorithm, the destruction shall be executed by a
								<selectables linebreak="yes">
									<selectable>
										<selectables>
											<selectable>single</selectable>
											<selectable><assignable>ST author-defined multi-pass</assignable></selectable>
										</selectables> overwrite consisting of 
										<selectables>
											<selectable>zeros</selectable>
											<selectable>ones</selectable>
											<selectable>pseudo-random pattern</selectable>
											<selectable>a new value of a key of the same size</selectable>
											<selectable><assignable>some value that does not contain any CSP</assignable></selectable>
										</selectables> followed by a read-verify. If the read-verification of the overwritten data fails,
										the process shall be repeated again up to <assignable>number of times to attempt overwrite</assignable> times, 
										whereupon an error is returned.</selectable>
									<selectable>block erase</selectable>
								</selectables></selectable>
						</selectables></h:li></h:ul>
				that meets the following: [<h:i>no standard</h:i>].
			</title>
			<note role="application">
				A DSC must implement mechanisms to destroy cryptographic keys and key material contained in
				persistent storage when no longer needed. The term “cryptographic keys” in this SFR includes
				the authorization data that is the entry point to a key chain and all other cryptographic keys and
				keying material (whether in plaintext or encrypted form). This SFR does not apply to the public
				component of asymmetric key pairs, or to keys that are permitted to remain stored such as device
				identification keys.<h:p/>
				In the case of volatile memory, the selection “removal of all references to the key directly followed
				by a request for garbage collection” is used in a situation where the TSF cannot address the
				specific physical memory locations holding the data to be erased and therefore relies on
				addressing logical addresses (which frees the relevant physical addresses holding the old data)
				and then requesting the platform to ensure that the data in the physical addresses is no longer
				available for reading (i.e. the “garbage collection” referred to in the SFR text).
				Guidance documentation for the TOE requires users not to allow the TOE to leave the user’s
				control while a session is active (and hence while the DEK is likely to be in plaintext in volatile
				memory).<h:p/>
				The selection for destruction of data in non-volatile memory includes block erase as an option,
				and this option applies only to flash memory. A block erase does not require a read verify, since 
				collaborative Protection Profile for Dedicated Security Components
				the mappings of logical addresses to the erased memory locations are erased as well as the data
				itself.<h:p/>
				Where different destruction methods are used for different data or different destruction situations
				then the different methods and the data/situations they apply to (e.g. different points in time, or
				power-loss situations) are described in the TSS (and the ST may use separate iterations of the SFR
				to aid clarity). The TSS includes a table describing all relevant keys and keying material (including
				authorization data) used in the implementation of the SFRs, stating the source of the data, all
				memory types in which the data is stored (covering storage both during and outside of a session,
				and both plaintext and non-plaintext forms of the data), and the applicable destruction method
				and time of destruction in each case.<h:p/>
				Some selections allow assignment of “some value that does not contain any CSP.” This means
				that the TOE uses some specified data not drawn from an RBG meeting FCS_RBG_EXT
				requirements, and not being any of the particular values listed as other selection options. The point
				of the phrase “does not contain any sensitive data” is to ensure that the overwritten data is
				carefully selected, and not taken from a general pool that might contain current or residual data
				(e.g. SDOs or intermediate key chain values) that itself requires confidentiality protection.<h:p/>
			</note>
		<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure it lists all relevant keys and keying
					material (describing the source of the data, all memory types in which the data is
					stored (covering storage both during and outside of a session, and both plaintext and
					non-plaintext forms of the data)), all relevant destruction situations (including the
					point in time at which the destruction occurs; e.g. factory reset or device wipe
					function, change of authorization data, change of DEK, completion of use of an
					intermediate key) and the destruction method used in each case. The evaluator shall
					confirm that the description of the data and storage locations is consistent with the
					functions carried out by the TOE (e.g. that all keys in the key chain are accounted
					for). (Where keys are stored encrypted or wrapped under another key then this may need to
					be explained in order to allow the evaluator to confirm the consistency of the description 
					of keys with the TOE functions). <h:p/>
					The evaluator shall check that the TSS identifies any configurations or
					circumstances that may not conform to the key destruction requirement (see further
					discussion in the AGD section below). Note that reference may be made to the AGD
					for description of the detail of such cases where destruction may be prevented or
					delayed.<h:p/>
					Where the ST specifies the use of “a value that does not contain any sensitive data”
					to overwrite keys, the evaluator shall examine the TSS to ensure that it describes
					how that pattern is obtained and used, and that this justifies the claim that the pattern
					does not contain any sensitive data. <h:p/>
				</TSS>
				<Guidance>
					The evaluator shall check that the guidance documentation for the TOE requires
					users to ensure that the TOE remains under the user’s control while a session is
					active.<h:p/>
					A TOE may be subject to situations that could prevent or delay data destruction in
					some cases. The evaluator shall check that the guidance documentation identifies
					configurations or circumstances that may not strictly conform to the key destruction
					requirement, and that this description is consistent with the relevant parts of the TSS
					(and KMD). The evaluator shall check that the guidance documentation provides
					guidance on situations where key destruction may be delayed at the physical layer,
					identifying any additional mitigation actions for the user (e.g. there might be some
					operation the user can invoke, or the user might be advised to retain control of the
					device for some particular time to maximise the probability that garbage collection
					will have occurred).<h:p/>
					For example, when the TOE does not have full access to the physical memory, it is
					possible that the storage may implement wear-levelling and garbage collection. This
					may result in additional copies of the data that are logically inaccessible but persist
					physically. Where available, the TOE might then describe use of the TRIM
					command	and garbage collection to destroy these persistent copies upon their
					deletion (this would be explained in TSS and guidance documentation). <h:p/>
					Where TRIM is used then the TSS or guidance documentation is also expected to describe how
					the keys are stored such that they are not inaccessible to TRIM, (e.g. they would need not
					to be contained in a file less than 982 bytes which would be completely contained in the
					master file table.<h:p/>
				</Guidance>
				<KMD>
						The evaluator shall examine the KMD to verify that it identifies and describes the
						interfaces that are used to service commands to read/write memory. The evaluator
						shall examine the interface description for each different media type to ensure that
						the interface supports the selections made by the ST author.<h:p/>
						45 The evaluator shall examine the KMD to ensure that all keys and keying material
						identified in the TSS and KMD have been accounted for.<h:p/>
						46 Note that where selections include ‘destruction of reference to the key directly
						followed by a request for garbage collection’ (for volatile memory) then the
						evaluator shall examine the KMD to ensure that it explains the nature of the
						destruction of the reference, the request for garbage collection, and of the garbage
						collection process itself.<h:p/>
				</KMD>
				<Tests>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are typically not found on factory products.<h:p/>
					The evaluator shall perform the following tests:
					<testlist>
						<test>
							Applied to each key or keying material held as plaintext in volatile
							memory and subject to destruction by overwrite by the TOE (whether or not the
							plaintext value is subsequently encrypted for storage in volatile or non-volatile
							memory).<h:p/>
							The evaluator shall:<h:ol type="1">
							<h:li>Record the value of the key or keying material.</h:li>
							<h:li>Cause the TOE to dump the SDO/SDE memory of the TOE into a binary file.</h:li>
							<h:li>Search the content of the binary file created in Step #2 to locate all
								instances of the known key value from Step #1.<h:p/>
								Note that the primary purpose of Step #3 is to demonstrate that appropriate
								search commands are being used for Steps #8 and #9.</h:li>
							<h:li>Cause the TOE to perform normal cryptographic processing with the key
								from Step #1.</h:li>
							<h:li>Cause the TOE to destroy the key.</h:li>
							<h:li>Cause the TOE to stop execution but not exit.</h:li>
							<h:li>Cause the TOE to dump the SDO/SDE memory of the TOE into a binary
								file.</h:li>
							<h:li>Search the content of the binary file created in Step #7 for instances of the
								known key value from Step #1.</h:li>
							<h:li>Break the key value from Step #1 into an evaluator-chosen set of
								fragments and perform a search using each fragment. (Note that the
								evaluator shall first confirm with the developer how the key is normally
								stored, in order to choose fragment sizes that are the same or smaller than
								any fragmentation of the data that may be implemented by the TOE. The
								endianness or byte-order should also be taken into account in the search.)</h:li>
							</h:ol><h:p/>
							Steps #1-8 ensure that the complete key does not exist anywhere in volatile
							memory. If a copy is found, then the test fails.<h:p/>
							Step #9 ensures that partial key fragments do not remain in memory. If the
							evaluator finds a 32-or-greater-consecutive-bit fragment, then fail immediately.
							Otherwise, there is a chance that it is not within the context of a key (e.g., some
							random bits that happen to match). If this is the case the test should be repeated
							with a different key in Step #1. If a fragment is also found in this repeated run
							then the test fails unless the developer provides a reasonable explanation for the
							collision, then the evaluator may give a pass on this test.<h:p/>
						</test>
						<test>
							Applied to each key and keying material held in non-volatile memory and
							subject to destruction by overwrite by the TOE.<h:ol type="1">
							<h:li>Record the value of the key or keying material.</h:li>
							<h:li>Cause the TOE to perform normal cryptographic processing with the key
								from Step #1.</h:li>
							<h:li>Search the non-volatile memory the key was stored in for instances of the
								known key value from Step #1. <h:p/>
								Note that the primary purpose of Step #3 is to demonstrate that appropriate
								search commands are being used for Steps #5 and #6.</h:li>
							<h:li>Cause the TOE to clear the key.</h:li>
							<h:li>Search the non-volatile memory in which the key was stored for instances
								of the known key value from Step #1. If a copy is found, then the test fails.</h:li>
							<h:li>Break the key value from Step #1 into an evaluator-chosen set of
								fragments and perform a search using each fragment. (Note that the
								evaluator shall first confirm with the developer how the key is normally
								stored, in order to choose fragment sizes that are the same or smaller than
								any fragmentation of the data that may be implemented by the TOE. The
								endianness or byte-order should also be taken into account in the search).</h:li>
							</h:ol>
							Step #6 ensures that partial key fragments do not remain in non-volatile memory.
							If the evaluator finds a 32-or-greater-consecutive-bit fragment, then fail
							immediately. Otherwise, there is a chance that it is not within the context of a key
							(e.g., some random bits that happen to match). If this is the case the test should be
							repeated with a different key in Step #1. If a fragment is also found in this
							repeated run then the test fails unless the developer provides a reasonable
							explanation for the collision, then the evaluator may give a pass on this test.
						</test>
						<test>
							Applied to each key and keying material held in non-volatile memory and
							subject to destruction by overwrite by the TOE.<h:ol type="1">
							<h:li>Record memory of the key or keying material.</h:li>
							<h:li>Cause the TOE to perform normal cryptographic processing with the key
								from Step #1.</h:li>
							<h:li>Cause the TOE to clear the key. Record the value to be used for the
								overwrite of the key. </h:li>
							<h:li>Examine the memory from Step #1 to ensure the appropriate pattern
								(recorded in Step #3) is used. </h:li>
							</h:ol>
							The test succeeds if correct pattern is found in the memory location. If the pattern
							is not found, then the test fails.
						</test>
					</testlist>
				</Tests>
		</aactivity>
	</f-element>
	</f-component>
		  
	<f-component cc-id="fcs_ckm_ext.4" name="Cryptographic Key and Key Material Destruction Timing">
		<f-element id="fcs-ckm-ext-1e1">
			<title>
				The TSF shall destroy all keys and keying material when no longer needed.
			</title>
			<note role="application">
				The DSC will have mechanisms to destroy keys, including intermediate keys and key material, by
				using an approved method, FCS_CKM.4. Examples of keys include intermediate keys, leaf keys,
				encryption keys, signing keys, verification keys, authentication tokens, and submasks. The DSC
				will have mechanisms to destroy keys and key material contained in persistent storage when no
				longer needed. Based on their implementation, vendors will explain when certain keys are no
				longer needed. An example in which key is no longer necessary includes a wrapped key whose
				password has changed. However, there are instances when keys are allowed to remain in memory,
				for example, a device identification key.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall verify the TSS provides a high-level description of what it
					means for keys and key material to be no longer needed and when this data should
					be expected to be destroyed.
				</TSS>
				<Guidance>
					There are no guidance evaluation activities for this component.
				</Guidance>
				<KMD>
					The evaluator shall verify that the KMD includes a description of the areas where
					keys and key material reside and when this data is no longer needed.<h:p/>
					The evaluator shall verify that the KMD includes a key lifecycle that includes a
					description where key materials reside, how the key materials are used, how it is 
					determined that keys and key material are no longer needed, and how the data is
					destroyed once it is no longer needed. The evaluator shall also verify that all key
					destruction operations are performed in a manner specified by FCS_CKM.4.<h:p/>
				</KMD>
				<Tests>
					There are no test evaluation activities for this component
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
	  
	  
		<f-component cc-id="fcs_ckm_ext.5" name="Cryptographic Key Derivation">
		<!-- <exportable id="inf-dsc=fcs-ckm-derv"/> -->
			<f-element id="fcs-ckm-ext-5e1">
				<title>The TSF shall generate cryptographic keys using the Key Derivation Functions defined by the following 
					rows of <xref to="fcs-ckm-keydrv-sels"/>:
					<selectables>
						<selectable id="sel-fcs-ckm-keydrv-1">KeyDrv1</selectable>
						<selectable id="sel-fcs-ckm-keydrv-2">KeyDrv2</selectable>
						<selectable id="sel-fcs-ckm-keydrv-3">KeyDrv3</selectable>
						<selectable id="sel-fcs-ckm-keydrv-4">KeyDrv4</selectable>
						<selectable id="sel-fcs-ckm-keydrv-5">KeyDrv5</selectable>
						<selectable id="sel-fcs-ckm-keydrv-6">KeyDrv6</selectable>
						<selectable id="sel-fcs-ckm-keydrv-7">KeyDrv7</selectable>
						<selectable id="sel-fcs-ckm-keydrv-8">KeyDrv8</selectable>
					</selectables>.<h:p/>
					<h:b><ctr ctr-type='Table' id="fcs-ckm-keydrv-sels">: Key Derivation Functions</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Key Type</h:td><h:td>Input Parameters</h:td>
						<h:td>Key Derivation Algorithm</h:td><h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-1"/>
							<h:td>KeyDrv1</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1 </h:td>
						<h:td>KDF in Counter Mode using <selectables>
								<selectable>CMAC-AES-128</selectable>
								<selectable>CMAC-AES-192</selectable>
								<selectable>CMAC-AES-256</selectable>
								<selectable>HMAC-SHA-1</selectable>
								<selectable>HMAC-SHA-256</selectable>
								<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 (Section 5.1) (KDF in Counter Mode)<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>
		
						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-2"/>
						<h:td>KeyDrv2</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1 </h:td>
						<h:td>KDF in Feedback Mode using <selectables>
								<selectable>CMAC-AES-128</selectable>
								<selectable>CMAC-AES-192</selectable>
								<selectable>CMAC-AES-256</selectable>
								<selectable>HMAC-SHA-1</selectable>
								<selectable>HMAC-SHA-256</selectable>
								<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 (Section 5.2) (KDF in Feedback Mode)<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>
		
						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-3"/>
						<h:td>KeyDrv3</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Direct Generation from a Random Bit Generator as specified in FCS_RBG_EXT.1 </h:td>
						<h:td>KDF in Double Pipeline Iteration Mode using <selectables>
								<selectable>CMAC-AES-128</selectable>
								<selectable>CMAC-AES-192</selectable>
								<selectable>CMAC-AES-256</selectable>
								<selectable>HMAC-SHA-1</selectable>
								<selectable>HMAC-SHA-256</selectable>
								<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 (Section 5.3) (KDF in n Double Pipeline Iteration Mode)<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-4"/>
						<h:td>KeyDrv4</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Intermediary keys</h:td>
						<h:td><selectables>
							<selectable>exclusive OR (XOR)</selectable>
							<selectable>SHA256</selectable>
							<selectable>SHA-512</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td><selectables>
							<selectable>ISO-HASH</selectable>
							<selectable>FIPSSHA</selectable>
							</selectables></h:td>
						</h:tr>
		
						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-5"/>
						<h:td>KeyDrv5</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Concatenated keys</h:td>
						<h:td>KDF in <selectables>
							<selectable>Counter Mode</selectable>
							<selectable>Feedback Mode</selectable>
							<selectable>Double Pipeline Iteration Mode</selectable>
							</selectables> using <selectables>
							<selectable>CMAC-AES-128</selectable>
							<selectable>CMAC-AES-192</selectable>
							<selectable>CMAC-AES-256</selectable>
							<selectable>HMAC-SHA-1</selectable>
							<selectable>HMAC-SHA-256</selectable>
							<selectable>HMAC-SHA-512</selectable>
							</selectables>as the PRF</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>NIST SP 800-108 [selection: (Section 5.1) (KDF in Counter Mode);<h:p/>
							(Section 5.2) (KDF in Feedback Mode);<h:p/>
							(Section 5.3) (KDF in Double-Pipeline Iteration Mode)]<h:p/>
							<selectables>
								<selectable>ISO-CMAC</selectable>
								<selectable>NIST-CMAC</selectable>
								<selectable>ISO-CIPH</selectable>
								<selectable>ISO-HMAC</selectable> 
								<selectable>FIPS-HMAC</selectable>
								<selectable>ISO-HASH</selectable>
								<selectable>FIPS-SHA</selectable>
								</selectables></h:td>
						</h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-6"/>
						<h:td>KeyDrv6</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>initialization vector</selectable>
							<selectable>authentication token</selectable>
							<selectable>authorization value</selectable>
							<selectable>HMAC key</selectable>
							<selectable>KMAC key</selectable>
							</selectables></h:td>
						<h:td>Two keys</h:td>
						<h:td><selectables>
							<selectable>AES-CCM</selectable>
							<selectable>AES-GCM</selectable>
							<selectable>AES-CBC</selectable>
							<selectable>AES-KWP</selectable>
							<selectable>AES-KW</selectable>
							<selectable>CAM-CBC</selectable> 
							<selectable>CAM-CCM</selectable>
							<selectable>CAM-GCM</selectable></selectables> from FCS_COP.1/SKC Symmetric Key table</h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>[selection: see List of Standards in FCS_COP.1/SKC Symmetric Key table]</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-7"/>
						<h:td>KeyDrv7</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>secret IV</selectable>
							<selectable>seed</selectable>
							</selectables></h:td>
						<h:td>Shared secret, salt, output length, fixed information</h:td>
						<h:td><selectables>
							<selectable>hash function from FCS_COP.1/Hash</selectable>
							<selectable>keyed hash from FCS_COP.1/HMAC</selectable>
							</selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>(NIST-KDRV) sec 4<h:p/>
							<selectables>
								<selectable>see List of Standards in FCS_COP.1/Hash and FCS_COP.1/HMAC</selectable>
								</selectables></h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-ckm-keydrv-8"/>
						<h:td>KeyDrv8</h:td>
						<h:td><selectables>
							<selectable>symmetric key</selectable>
							<selectable>secret IV</selectable>
							<selectable>seed</selectable>
							</selectables></h:td>
						<h:td>Shared secret, salt, IV, output length, fixed information</h:td>
						<h:td><selectables>
							<selectable>keyed hash from FCS_COP.1/HMAC</selectable></selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>192</selectable>
							<selectable>256</selectable>
							</selectables>bits</h:td>
						<h:td>(NIST-KDRV) sec 5<h:p/>
							<selectables>
								<selectable>see List of Standards in FCS_COP.1/Hash and FCS_COP.1/HMAC</selectable>
								</selectables></h:td></h:tr>
					</h:table>
				</title>
				<note role="application">
					Note that Camellia algorithms do not support 192-bit key sizes.<h:p/>
					The interface referenced in the requirement could take different forms, the most likely of which is
					an application programming interface to an OS kernel. There may be various levels of abstraction.
					For Authorization Factor Submasks, the key size to be used in the HMAC falls into a range between
					L1 and L2 defined in ISO/IEC 10118 for the appropriate hash function (for example for SHA-256
					L1 = 512, L2 =256) where L2 = k = L1.<h:p/>
					General note: in order to use a NIST SP 800-108 conformant method of key derivation, the TOE
					is permitted to implement this with keys as derived as indicated in Key Derivation Functions table
					above, and with the algorithms as indicated in the same table.<h:p/>
					NIST SP 800-131A Rev 1 allows the use of SHA-1 in these use cases.<h:p/>
					KeyDrv5, KeyDrv6, and the XOR option in KeyDrv4 will create an “inverted key hierarchy” in
					which the TSF will combine two or more keys to create a third key. These same KDFs may also
					use a submask key as input, which could be an authorization factor or derived from a PBKDF. In
					these cases the ST author must explicitly declare this option and should present a reasonable
					argument that the entropy of the inputs to the KDFs will result in full entropy of the expected
					output.<h:p/>
					If keys are combined, the ST author shall describe which method of combination is used in order
					to justify that the effective entropy of each factor is preserved.<h:p/>
					The documentation of the product’s encryption key management should be detailed enough that,
					after reading, the evaluator will thoroughly understand the product’s key management and how it
					meets the requirements to ensure the keys are adequately protected. This documentation should
					include an essay and diagrams. This documentation is not required to be part of the TSS; it can be
					submitted as a separate document and marked as developer proprietary.<h:p/>
					SP 800-56C specifies a two-step key derivation procedure that employs an extraction-thenexpansion technique for deriving keying material from a shared secret generated during a key
					establishment scheme. The Randomness Extraction step as described in Section 5 of SP 800-56C
					is followed by Key Expansion using the key derivation functions defined in SP 800-108.<h:p/>
					This requirement must be claimed by the TOE if at least one of FCS_CKM.1/KEK,
					FCS_CKM.1/SK, or FCS_COP.1/KeyEnc chooses a selection related to key derivation.<h:p/>
					If at least one of KeyDrv4, KeyDrv5, or KeyDrv6 is selected AND password-based key derivation
					is used to create at least one of the inputs, the selection-based SFR FCS_COP.1/PBKDF must also
					be claimed.<h:p/>
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>

		
		<f-component cc-id="fcs_cop.1" iteration="Hash" name="Cryptographic Operation (Hashing)">
<!--			<exportable id="inf-dsc-cop-hash"/>  -->
			<f-element id="fcs-cop-1e1-hash">
				<title>The TSF shall perform [<h:i>cryptographic hashing</h:i>] in accordance with a
					specified cryptographic algorithm 
					<selectables>
						<selectable>SHA-1</selectable>
						<selectable>SHA-224</selectable>
						<selectable>SHA-256</selectable>
						<selectable>SHA-384</selectable>
						<selectable>SHA-512</selectable>
						<selectable>SHA3-224</selectable>
						<selectable>SHA3-256</selectable>
						<selectable>SHA3-384</selectable>
						<selectable>SHA3-512</selectable>
					</selectables> that meets the following: 
					<selectables>
						<selectable>ISO/IEC 10118-3:2018</selectable>
						<selectable>FIPS 180-4</selectable>
					</selectables>.
				</title>
				<note role="application">
					The hash selection should be consistent with the overall strength of the algorithm used for
					signature generation. For example, the DSC should choose SHA-256 for 2048-bit RSA or ECC 
					with P-256, SHA-384 for 3072-bit RSA, 4096-bit RSA, or ECC with P-384, and SHA-512 for ECC
					with P-521. The ST author selects the standard based on the algorithms selected.<h:p/>
					SHA-1 may be used for the following applications: generating and verifying hash-based message
					authentication codes (HMACs), key derivation functions (KDFs), and random bit/number
					generation (In certain cases, SHA-1 may also be used for verifying old digital signatures and time
					stamps, provided that this is explicitly allowed by the application domain).
				</note>
				<aactivity>
					<TSS>
						The evaluator shall check that the association of the hash function with other TSF
						cryptographic functions (for example, the digital signature verification function) is
						documented in the TSS. The evaluator shall also check that the TSS identifies
						whether the implementation is bit-oriented or byte-oriented.
					</TSS>
					<Guidance>
						The evaluator checks the AGD documents to determine that any configuration that
						is required to configure the required hash sizes is present. The evaluator also checks
						the AGD documents to confirm that the instructions for establishing the evaluated
						configuration use only those hash algorithms selected in the ST.
					</Guidance>
					<KMD>
						There are no KMD evaluation activities for this component.
					</KMD>
					<Tests>
						The following tests require the developer to provide access to a test platform that
						provides the evaluator with tools that are typically not found on factory products.<h:p/>
						<h:b>SHA-1 and SHA-2 Tests</h:b><h:p/>
						The tests below are derived from the “The Secure Hash Algorithm Validation
						System (SHAVS), Updated: May 21, 2014” from the National Institute of Standards
						and Technology.<h:p/>
						The TSF hashing functions can be implemented with one of two orientations. The
						first is a byte-oriented implementation: this hashes messages that are an integral
						number of bytes in length (i.e., the length (in bits) of the message to be hashed is
						divisible by 8). The second is a bit-oriented implementation: this hashes messages
						of arbitrary length. Separate tests for each orientation are given below.<h:p/>
						The evaluator shall perform all of the following tests for each hash algorithm and
						orientation implemented by the TSF and used to satisfy the requirements of this PP.
						The evaluator shall compare digest values produced by a known-good SHA
						implementation against those generated by running the same values through the
						TSF.<h:p/>
						<h:b>Short Messages Test, Bit-oriented Implementation</h:b><h:p/>
						The evaluators devise an input set consisting of m+1 messages, where m is the block
						length of the hash algorithm in bits (see SHA Properties Table). The length of the
						messages ranges sequentially from 0 to m bits. The message text shall be pseudorandomly generated. The evaluators compute the message digest for each of the
						messages and ensure that the correct result is produced when the messages are
						provided to the TSF.<h:p/>
						<h:b>Short Messages Test, Byte-oriented Implementation</h:b><h:p/>
						The evaluators devise an input set consisting of m/8+1 messages, where m is the
						block length of the hash algorithm in bits (see SHA Properties Table). The length
						of the messages ranges sequentially from 0 to m/8 bytes, with each message being
						an integral number of bytes. The message text shall be pseudo-randomly generated.
						The evaluators compute the message digest for each of the messages and ensure
						that the correct result is produced when the messages are provided to the TSF.<h:p/>
						<h:b>Selected Long Messages Test, Bit-oriented Implementation</h:b><h:p/>
						The evaluators devise an input set consisting of m messages, where m is the block
						length of the hash algorithm in bits (see SHA Properties Table). The length of the
						ith message is m + 99*i, where 1 ≤ i ≤ m. The message text shall be pseudorandomly generated. The evaluators compute the message digest for each of the
						messages and ensure that the correct result is produced when the messages are
						provided to the TSF.<h:p/>
						<h:b>Selected Long Messages Test, Byte-oriented Implementation</h:b><h:p/>
						The evaluators devise an input set consisting of m/8 messages, where m is the block
						length of the hash algorithm in bits (see SHA Properties Table). The length of the
						ith message is m + 8*99*i, where 1 ≤ i ≤ m/8. The message text shall be pseudorandomly generated. The evaluators compute the message digest for each of the
						messages and ensure that the correct result is produced when the messages are
						provided to the TSF.<h:p/>
						<h:b>Pseudo-randomly Generated Messages Test</h:b><h:p/>
						The evaluators randomly generate a seed that is n bits long, where n is the length of
						the message digest produced by the hash function to be tested. The evaluators then
						formulate a set of 100 messages and associated digests by following the algorithm
						provided in Figure 1 of SHAVS, section 6.4. The evaluators then ensure that the
						correct result is produced when the messages are provided to the TSF.<h:p/>
						<h:b>SHA-3 Tests</h:b><h:p/>
						The tests below are derived from the The Secure Hash Algorithm-3 Validation
						System (SHA3VS), Updated: April 7, 2016, from the National Institute of
						Standards and Technology.<h:p/>
						For each SHA-3-XXX implementation, XXX represents d, the digest length in bits.
						The capacity, c, is equal to 2d bits. The rate is equal to 1600-c bits.<h:p/>
						65 The TSF hashing functions can be implemented with one of two orientations. The
						first is a bit-oriented mode that hashes messages of arbitrary length. The second is
						a byte-oriented mode that hashes messages that are an integral number of bytes in
						length (i.e., the length (in bits) of the message to be hashed is divisible by 8).
						Separate tests for each orientation are given below.<h:p/>
						The evaluator shall perform all of the following tests for each hash algorithm and
						orientation implemented by the TSF and used to satisfy the requirements of this PP.
						The evaluator shall compare digest values produced by a known-good SHA-3 
						implementation against those generated by running the same values through the
						TSF.<h:p/>
						<h:b>Short Messages Test, Bit-oriented Mode</h:b><h:p/>
						The evaluators devise an input set consisting of rate+1 short messages. The length
						of the messages ranges sequentially from 0 to rate bits. The message text shall be
						pseudo-randomly generated. The evaluators compute the message digest for each
						of the messages and ensure that the correct result is produced when the messages
						are provided to the TSF. The message of length 0 is omitted if the TOE does not
						support zero-length messages.<h:p/>
						<h:b>Short Messages Test, Byte-oriented Mode</h:b><h:p/>
						The evaluators devise an input set consisting of rate/8+1 short messages. The length
						of the messages ranges sequentially from 0 to rate/8 bytes, with each message being
						an integral number of bytes. The message text shall be pseudo-randomly generated.
						The evaluators compute the message digest for each of the messages and ensure
						that the correct result is produced when the messages are provided to the TSF. The
						message of length 0 is omitted if the TOE does not support zero-length messages.<h:p/>
						<h:b>Selected Long Messages Test, Bit-oriented Mode</h:b><h:p/>
						The evaluators devise an input set consisting of 100 long messages ranging in size
						from rate+(rate+1) to rate+(100*(rate+1)), incrementing by rate+1. (For example,
						SHA-3-256 has a rate of 1088 bits. Therefore, 100 messages will be generated with
						lengths 2177, 3266, …, 109988 bits.) The message text shall be pseudo-randomly
						generated. The evaluators compute the message digest for each of the messages and
						ensure that the correct result is produced when the messages are provided to the
						TSF.<h:p/>
						<h:b>Selected Long Messages Test, Byte-oriented Mode</h:b><h:p/>
						The evaluators devise an input set consisting of 100 messages ranging in size from
						(rate+(rate+8)) to (rate+100*(rate+8)), incrementing by rate+8. (For example,
						SHA-3-256 has a rate of 1088 bits. Therefore 100 messages will be generated of
						lengths 2184, 3280, 4376, …, 110688 bits.) The message text shall be pseudorandomly generated. The evaluators compute the message digest for each of the
						messages and ensure that the correct result is produced when the messages are
						provided to the TSF.<h:p/>
						<h:b>Pseudo-randomly Generated Messages Monte Carlo) Test, Byte-oriented Mode</h:b><h:p/>
						The evaluators supply a seed of d bits (where d is the length of the message digest
						produced by the hash function to be tested. This seed is used by a pseudorandom
						function to generate 100,000 message digests. One hundred of the digests (every
						1000th digest) are recorded as checkpoints. The TOE then uses the same procedure
						to generate the same 100,000 message digests and 100 checkpoint values. The
						evaluators then compare the results generated ensure that the correct result is
						produced when the messages are generated by the TSF.<h:p/>
					</Tests>
				</aactivity>
			</f-element>
		</f-component>
		
		<f-component cc-id="fcs_cop.1" iteration="HMAC" name="Cryptographic Operation (Keyed Hash)">
<!--			<exportable id="inf-dsc-fcs-cop-hmac"/> -->
			<f-element id="fcs-cop-1e1-hmac">
				<title>The TSF shall perform [<h:i>keyed hash message authentication</h:i>] in accordance
					with a specified cryptographic algorithm 
					<selectables>
						<selectable>HMAC-SHA-1</selectable>
						<selectable>HMAC-SHA-256</selectable>
						<selectable>HMAC-SHA-384</selectable>
						<selectable>HMAC-SHA-512</selectable>
						<selectable>KMAC128</selectable>
						<selectable>KMAC256</selectable>
					</selectables> and cryptographic key sizes <assignable>key size (in bits)</assignable>
					that meet the following: 
					<selectables>
						<selectable>ISO/IEC 9797-2:2011 Section 7 “MAC Algorithm 2”</selectable>
						<selectable>[NIST-KDV] section 4 “KMAC”</selectable>
					</selectables>.
				</title>
				<note role="application">
					The HMAC key size falls into a range between L1 and L2 defined in ISO/IEC 10118 for the
					appropriate hash function (for example for SHA-256 L1 = 512, L2 = 256) where L2 ≤ k ≤ L1.
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the TSS to ensure that it specifies the following values
						used by the HMAC and KMAC functions: output MAC length used.
					</TSS>
					<Guidance>
						There are no guidance evaluation activities for this component.
					</Guidance>
					<KMD>
						There are no KMD evaluation activities for this component.
					</KMD>
					<Tests>
						The following test requires the developer to provide access to a test platform that
						provides the evaluator with tools that are typically not found on factory products.<h:p/>
						This test is derived from The Keyed-Hash Message Authentication Code Validation
						System (HMACVS), updated 6 May 2016.<h:p/>
						The evaluator shall provide 15 sets of messages and keys for each selected hash
						algorithm and hash length/key size/MAC size combination. The evaluator shall
						have the TSF generate HMAC or KMAC tags for these sets of test data. The
						evaluator shall verify that the resulting HMAC or KMAC tags match the results
						from submitting the same inputs to a known-good implementation of the HMAC or
						KMAC function, having the same characteristics.<h:p/>
					</Tests>
				</aactivity>
			</f-element>
		</f-component>
		
		
	<f-component cc-id="fcs_cop.1" iteration="KAT" name="Cryptographic Operation (Key Agreement/Transport)">
		<f-element id="fcs-cop-1e1-kat">
			<title>The TSF shall perform [<h:i>cryptographic key agreement/transport</h:i>] using the supported
			methods for key agreement/transport defined by the following rows of <xref to="fcs-ckm-kat-sels"/>: 
			<selectables>
				<selectable id="sel-fcs-cop-kat-kas1">KAS1</selectable>
				<selectable id="sel-fcs-cop-kat-kas2">KAS2</selectable>
				<selectable id="sel-fcs-cop-kat-kts">KTS-OAEP</selectable>
				<selectable id="sel-fcs-cop-kat-rsaes">RSAES-PKCS1-v1_5</selectable>
				<selectable id="sel-fcs-cop-kat-ecdh-nist">ECDH-NIST</selectable>
				<selectable id="sel-fcs-cop-kat-ecdh-bpc">ECDH-BPC</selectable>
				<selectable id="sel-fcs-cop-kat-dh">DH</selectable>
				<selectable id="sel-fcs-cop-kat-curve25519">Curve25519</selectable>
				<selectable id="sel-fcs-cop-kat-ecies">ECIES</selectable>
			</selectables>.<h:p/>
			<h:b><ctr ctr-type='Table' id="fcs-ckm-kat-sels">: Supported Methods for Key Agreement/Transport Operation</ctr></h:b><h:br/>	
			<h:table>
				<h:tr class="header"><h:td>Identifier</h:td><h:td>Cryptographic Algorithm</h:td><h:td>Key Sizes</h:td>
						<h:td>List of Standards</h:td></h:tr>
					
				<h:tr><depends on-sel="sel-fcs-cop-kat-kas1"/>
					<h:td>KAS1</h:td>
					<h:td>RSA-single party</h:td>
					<h:td><selectables>
						<selectable>2048</selectable>
						<selectable>3072</selectable>
						<selectable>4096</selectable>
						<selectable>6144</selectable>
						<selectable>8192</selectable>
					</selectables>bits</h:td>
					<h:td>NIST SP 800-56Br2 section 8.2</h:td>
				</h:tr>
			
				<h:tr><depends on-sel="sel-fcs-cop-kat-kas2"/>
					<h:td>KAS2</h:td>
					<h:td>RSA-both party</h:td>
					<h:td><selectables>
						<selectable>2048</selectable>
						<selectable>3072</selectable>
						<selectable>4096</selectable>
						<selectable>6144</selectable>
						<selectable>8192</selectable>
					</selectables>bits</h:td>
					<h:td>NIST SP 800-56Br2 section 8.3</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-kat-kts"/>
					<h:td>KTS-OAEP</h:td>
					<h:td>RSA</h:td>
					<h:td><selectables>
						<selectable>2048</selectable>
						<selectable>3072</selectable>
						<selectable>4096</selectable>
						<selectable>6144</selectable>
						<selectable>8192</selectable>
					</selectables>bits</h:td>
					<h:td>NIST SP 800-56Br2 section 9</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-kat-rsaes"/>
					<h:td>RSAES-PKCS1-v1_5</h:td>
					<h:td>RSA</h:td>
					<h:td><selectables>
						<selectable>2048</selectable>
						<selectable>3072</selectable>
						<selectable>4096</selectable>
						<selectable>6144</selectable>
						<selectable>8192</selectable>
					</selectables>bits</h:td>
					<h:td>RFC 8017 Section 7.2</h:td>
				</h:tr>
				
				<h:tr><depends on-sel="sel-fcs-cop-kat-ecdh-nist"/>
					<h:td>ECDH-NIST</h:td>
					<h:td>ECDH with NIST curves</h:td>
					<h:td><selectables>
						<selectable>256 (P-256)</selectable>
						<selectable>384 (P-384)</selectable>
						<selectable>512 (P-521)</selectable>
					</selectables></h:td>
					<h:td>NIST SP 800-56Ar3</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-kat-ecdh-bpc"/>
					<h:td>ECDH-BPC</h:td>
					<h:td>ECDH with Brainpool curves</h:td>
					<h:td><selectables>
						<selectable>256 (brainpoolP256r1)</selectable>
						<selectable>384 (brainpoolP384r1</selectable>
						<selectable>512 (brainpoolP512r1)</selectable>
					</selectables></h:td>
					<h:td>RFC 5639 (Section 3)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-kat-dh"/>
					<h:td>DH</h:td>
					<h:td>Diffie-Hellman</h:td>
					<h:td><selectables>
						<selectable>2048</selectable>
						<selectable>3072</selectable>
						<selectable>4096</selectable>
						<selectable>6144</selectable>
						<selectable>8192</selectable>
					</selectables>bits</h:td>
					<h:td>NIST SP 800-56A rev 3,
						<selectables>
							<selectable>RFC 3526 Section 
								<selectables>
									<selectable>3</selectable>
									<selectable>4</selectable>
									<selectable>5</selectable>
									<selectable>6</selectable>
									<selectable>7</selectable>
									</selectables></selectable>
							<selectable>RFC 7919 Appendices 
								<selectables>
									<selectable>A.1</selectable>
									<selectable>A.2</selectable>
									<selectable>A.3</selectable>
									<selectable>A.4</selectable>
									<selectable>A.5</selectable>
								</selectables></selectable>
						</selectables></h:td>
				</h:tr>
				
				<h:tr><depends on-sel="sel-fcs-cop-kat-curve25519"/>
					<h:td>Curve25519</h:td>
					<h:td>ECDH</h:td>
					<h:td>256 bits</h:td>
					<h:td>RFC 7748</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-kat-ecies"/>
					<h:td>ECIES</h:td>
					<h:td>ECIES</h:td>
					<h:td><selectables>
						<selectable>256</selectable>
						<selectable>384</selectable>
						<selectable>512</selectable>
					</selectables>bits</h:td>
					<h:td>
						<selectables>
							<selectable>ANSI X9.63</selectable>,
							<selectable>IEEE 1363a</selectable>,
							<selectable>ISO/IEC 18033-2 Part 2</selectable>,
							<selectable>SECG SEC1 sec 5.1</selectable>
						</selectables></h:td>
				</h:tr>
			</h:table>
			</title>
			<note role="application">
				The selections in this SFR should be consistent with the algorithms selected in FCS_CKM.2.	
			</note>
			<aactivity>
				<TSS>
					The evaluator shall ensure that the selected RSA and ECDH key
					agreement/transport schemes correspond to the key generation schemes selected in
					FCS_CKM.1/AK, and the key establishment schemes selected in FCS_CKM.2 If
					the ST selects DH, the TSS shall describe how the implementation meets the
					relevant sections of RFC 3526 (Section 3-7) and RFC 7919 (Appendices A.1-A.5).
					If the ST selects ECIES, the TSS shall describe the key sizes and algorithms (e.g.
					elliptic curve point multiplication, ECDH with either NIST or Brainpool curves,
					AES in a mode permitted by FCS_COP.1/SKC, a SHA-2 hash algorithm permitted
					by FCS_COP.1/Hash, and a MAC algorithm permitted by FCS_COP.1/HMAC)
					that are supported for the ECIES implementation.<h:p/>
					The evaluator shall ensure that, for each key agreement/transport scheme, the size
					of the derived keying material is at least the same as the intended strength of the 
					key agreement/transport scheme, and where feasible this should be twice the
					intended security strength of the key agreement/transport scheme.<h:p/>
					Table 2 of NIST SP 800-57 identifies the key strengths for the different algorithms
					that can be used for the various key agreement/transport schemes.<h:p/>
				</TSS>
				<Guidance>
					There are no guidance evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are typically not found on factory products.<h:p/>
					The evaluator shall verify the implementation of the key generation routines of the
					supported schemes using the following tests:<h:p/>
					<h:b>If ECDH-NIST or ECDH-BPC is claimed:</h:b><h:p/>
					<h:b>SP800-56A Key Agreement Schemes</h:b><h:p/>
					The evaluator shall verify a TOE's implementation of SP800-56A key agreement
					schemes using the following Function and Validity tests. These validation tests for
					each key agreement scheme verify that a TOE has implemented the components of
					the key agreement scheme according to the specifications in the Recommendation.
					These components include the calculation of the DLC primitives (the shared secret
					value Z) and the calculation of the derived keying material (DKM) via the Key
					Derivation Function (KDF). If key confirmation is supported, the evaluator shall
					also verify that the components of key confirmation have been implemented
					correctly, using the test procedures described below. This includes the parsing of
					the DKM, the generation of MACdata and the calculation of MACtag.<h:p/>
					<h:i>Function Test</h:i><h:p/>
					The Function test verifies the ability of the TOE to implement the key agreement
					schemes correctly. To conduct this test the evaluator shall generate or obtain test
					vectors from a known good implementation of the TOE supported schemes. For
					each supported key agreement scheme-key agreement role combination, KDF type,
					and, if supported, key confirmation role-key confirmation type combination, the
					tester shall generate 10 sets of test vectors. The data set consists of one set of domain
					parameter values (FFC) or the NIST approved curve (ECC) per 10 sets of public
					keys. These keys are static, ephemeral or both depending on the scheme being
					tested.<h:p/>
					The evaluator shall obtain the DKM, the corresponding TOE’s public keys (static
					or ephemeral), the MAC tags, and any inputs used in the KDF, such as the Other
					Information field OI and TOE id fields.<h:p/>
					If the TOE does not use a KDF defined in SP 800-56A, the evaluator shall obtain
					only the public keys and the hashed value of the shared secret. <h:p/>
					The evaluator shall verify the correctness of the TSF’s implementation of a given
					scheme by using a known good implementation to calculate the shared secret value,
					derive the keying material DKM, and compare hashes or MAC tags generated from
					these values.<h:p/>
					If key confirmation is supported, the TSF shall perform the above for each
					implemented approved MAC algorithm.<h:p/>
					<h:i>Validity Test</h:i><h:p/>
					The Validity test verifies the ability of the TOE to recognize another party’s valid
					and invalid key agreement results with or without key confirmation. To conduct this
					test, the evaluator shall obtain a list of the supporting cryptographic functions
					included in the SP800-56A key agreement implementation to determine which
					errors the TOE should be able to recognize. The evaluator generates a set of 24
					(FFC) or 30 (ECC) test vectors consisting of data sets including domain parameter
					values or NIST approved curves, the evaluator’s public keys, the TOE’s
					public/private key pairs, MACTag, and any inputs used in the KDF, such as the
					other info and TOE id fields.<h:p/>
					The evaluator shall inject an error in some of the test vectors to test that the TOE
					recognizes invalid key agreement results caused by the following fields being
					incorrect: the shared secret value Z, the DKM, the other information field OI, the
					data to be MACed, or the generated MACTag. If the TOE contains the full or partial
					(only ECC) public key validation, The evaluator shall also individually inject errors
					in both parties’ static public keys, both parties’ ephemeral public keys and the
					TOE’s static private key to assure the TOE detects errors in the public key validation
					function or the partial key validation function (in ECC only). At least two of the test
					vectors shall remain unmodified and therefore should result in valid key agreement
					results (they should pass).<h:p/>
					The TOE shall use these modified test vectors to emulate the key agreement scheme
					using the corresponding parameters. The evaluator shall compare the TOE’s results
					with the results using a known good implementation verifying that the TOE detects
					these errors.<h:p/>
					<h:b>If KAS1, KAS2, KTS-OAEP, or RSAES-PKCS1-v1_5 is claimed:</h:b><h:p/>
					<h:b>SP800-56B and PKCS#1 Key Establishment Schemes</h:b><h:p/>
					If the TOE acts as a sender, the following evaluation activity shall be performed to
					ensure the proper operation of every TOE supported combination of RSA-based
					key establishment scheme:<h:p/>
					To conduct this test the evaluator shall generate or obtain test vectors from a known
					good implementation of the TOE supported schemes. For each combination of
					supported key establishment scheme and its options (with or without key
					confirmation if supported, for each supported key confirmation MAC function if
					key confirmation is supported, and for each supported mask generation function if
					KTS-OAEP is supported), the tester shall generate 10 sets of test vectors. Each test
					vector shall include the RSA public key, the plaintext keying material, any
					additional input parameters if applicable, the MacKey and MacTag if key 
					confirmation is incorporated, and the outputted ciphertext. For each test vector, the
					evaluator shall perform a key establishment encryption operation on the TOE with
					the same inputs (in cases where key confirmation is incorporated, the test shall use
					the MacKey from the test vector instead of the randomly generated MacKey used
					in normal operation) and ensure that the outputted ciphertext is equivalent to the
					ciphertext in the test vector.<h:p/>
					If the TOE acts as a receiver, the following evaluation activities shall be performed
					to ensure the proper operation of every TOE supported combination of RSA-based
					key establishment scheme:<h:p/>
					To conduct this test the evaluator shall generate or obtain test vectors from a known
					good implementation of the TOE supported schemes. For each combination of
					supported key establishment scheme and its options (with our without key
					confirmation if supported, for each supported key confirmation MAC function if
					key confirmation is supported, and for each supported mask generation function if
					KTSOAEP is supported), the tester shall generate 10 sets of test vectors. Each test
					vector shall include the RSA private key, the plaintext keying material (KeyData),
					any additional input parameters if applicable, the MacTag in cases where key
					confirmation is incorporated, and the outputted ciphertext. For each test vector, the
					evaluator shall perform the key establishment decryption operation on the TOE and
					ensure that the outputted plaintext keying material (KeyData) is equivalent to the
					plain text keying material in the test vector. In cases where key confirmation is
					incorporated, the evaluator shall perform the key confirmation steps and ensure that
					the outputted MacTag is equivalent to the MacTag in the test vector.<h:p/>
					The evaluator shall ensure that the TSS describes how the TOE handles decryption
					errors. In accordance with NIST Special Publication 800-56B, the TOE must not
					reveal the particular error that occurred, either through the contents of any outputted
					or logged error message or through timing variations. If KTS-OAEP is supported,
					the evaluator shall create separate contrived ciphertext values that trigger each of
					the three decryption error checks described in NIST Special Publication 800-56B
					section 7.2.2.3, ensure that each decryption attempt results in an error, and ensure
					that any outputted or logged error message is identical for each.<h:p/>
					<h:b>DH:</h:b><h:p/>
					The evaluator shall verify the correctness of each TSF implementation of each
					supported Diffie-Hellman group by comparison with a known good
					implementation.<h:p/>
					<h:b>Curve25519:</h:b><h:p/>
					The evaluator shall verify a TOE's implementation of the key agreement scheme
					using the following Function and Validity tests. These validation tests for each key
					agreement scheme verify that a TOE has implemented the components of the key
					agreement scheme according to the specification. These components include the
					calculation of the shared secret K and the hash of K.<h:p/>
					<h:b>Function Test</h:b><h:p/>
					The Function test verifies the ability of the TOE to implement the key agreement
					schemes correctly. To conduct this test the evaluator shall generate or obtain test
					vectors from a known good implementation of the TOE supported schemes. For
					each supported key agreement role and hash function combination, the tester shall
					generate 10 sets of public keys. These keys are static, ephemeral or both depending
					on the scheme being tested.<h:p/>
					The evaluator shall obtain the shared secret value K, and the hash of K. The
					evaluator shall verify the correctness of the TSF’s implementation of a given
					scheme by using a known good implementation to calculate the shared secret value
					K and compare the hash generated from this value.<h:p/>
					<h:b>Validity Test</h:b><h:p/>
					The Validity test verifies the ability of the TOE to recognize another party’s valid
					and invalid key agreement results. To conduct this test, the evaluator generates a set
					of 30 test vectors consisting of data sets including the evaluator’s public keys and
					the TOE’s public/private key pairs.<h:p/>
					The evaluator shall inject an error in some of the test vectors to test that the TOE
					recognizes invalid key agreement results caused by the following fields being
					incorrect: the shared secret value K or the hash of K. At least two of the test vectors
					shall remain unmodified and therefore should result in valid key agreement results
					(they should pass).<h:p/>
					The TOE shall use these modified test vectors to emulate the key agreement scheme
					using the corresponding parameters. The evaluator shall compare the TOE’s results
					with the results using a known good implementation verifying that the TOE detects
					these errors.<h:p/>
					<h:b>ECIES:</h:b><h:p/>
					The evaluator shall verify the correctness of each TSF implementation of each
					supported use of ECIES by comparison with a known good implementation.<h:p/>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
		
		<f-component cc-id="fcs_cop.1" iteration="KeyEnc" name="Cryptographic Operation (Key Encryption)">
			<f-element id="fcs-cop-1e1-keyenc">
				<title>
					The TSF shall perform [<h:i>key encryption and decryption</h:i>] using the methods defined in the
					following rows of <xref to="fcs-cop-keyenc-sels"/>:
					<selectables>
						<selectable id="sel-fcs-cop-keyenc-se1">SE1</selectable>
						<selectable id="sel-fcs-cop-keyenc-ae1">AE1</selectable>
						<selectable id="sel-fcs-cop-keyenc-se2">SE2</selectable>
						<selectable id="sel-fcs-cop-keyenc-xor">XOR</selectable>
					</selectables><h:p/>
					<h:b><ctr ctr-type='Table' id="fcs-cop-keyenc-sels">: Supported Methods for Key Encryption Operation</ctr></h:b><h:br/>	
					<h:table>
						<h:tr class="header"><h:td>Identifier</h:td><h:td>Cryptographic Algorithm</h:td>
						<h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>

						<h:tr><depends on-sel="sel-fcs-cop-keyenc-se1"/>
						<h:td>SE1</h:td>
						<h:td>Symmetric <selectables>
							<selectable>AES-CCM</selectable>
							<selectable>AES-GCM</selectable>
							<selectable>AES-CBC</selectable>
							<selectable>AES-CTR</selectable>
							<selectable>AES-KWP</selectable>
							<selectable>AESKW</selectable>
							</selectables></h:td>
							<h:td><selectables>
								<selectable>128</selectable>
								<selectable>192</selectable>
								<selectable>256</selectable></selectables> bits</h:td>
						<h:td>See FCS_COP.1/SKC</h:td></h:tr>
					
						<h:tr><depends on-sel="sel-fcs-cop-keyenc-ae1"/>
						<h:td>AE1</h:td>
						<h:td>Asymmetric KTS-OAEP</h:td>
						<h:td><selectables>
							<selectable>2048</selectable>
							<selectable>3072</selectable></selectables> bits</h:td>
						<h:td>See FCS_COP.1/SKC</h:td></h:tr>
		
						<h:tr><depends on-sel="sel-fcs-cop-keyenc-se2"/>
						<h:td>SE2</h:td>
						<h:td>Symmetric <selectables>
							<selectable>CAM-CBC</selectable>
							<selectable>CAM-CCM</selectable>
							<selectable>CAM-GCM</selectable>
							</selectables></h:td>
						<h:td><selectables>
							<selectable>128</selectable>
							<selectable>256</selectable></selectables> bits</h:td>
						<h:td>See FCS_COP.1/KAT</h:td></h:tr>
						
						<h:tr><depends on-sel="sel-fcs-cop-keyenc-xor"/>
						<h:td>XOR</h:td>
						<h:td>Exclusive OR operation</h:td>
							<h:td><selectables>
								<selectable>128</selectable>
								<selectable>192</selectable>
								<selectable>256</selectable></selectables> bits</h:td>
						<h:td>See FCS_CKM_EXT.5</h:td></h:tr>
					</h:table>
				</title>
				<note role="application">
					A TOE will use this requirement to specify how the Key Encryption Key (KEK) wraps a
					symmetric encryption key. A TOE will always need this requirement in order to capture the last
					stage of the key chain in which the Key Encryption Key (KEK) wraps the symmetric encryption
					key.<h:p/>
					If XOR is selected, the selection-based SFR FCS_CKM_EXT.5 must be claimed by the TOE.<h:p/>
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the TSS to ensure that it identifies whether the
						implementation of this cryptographic operation for key encryption (including key
						lengths and modes) is an implementation that is tested in FCS_COP.1/SKC.<h:p/>
						The evaluator shall check that the TSS includes a description of the key wrap
						functions and shall check that this uses a key wrap algorithm and key sizes
						according to the specification selected in the ST out of the table as provided in the
						cPP table. <h:p/>
					</TSS>
					<Guidance>
						The evaluator checks the AGD documents to confirm that the instructions for
						establishing the evaluated configuration use only those key wrap functions selected
						in the ST. If multiple key access modes are supported, the evaluator shall examine
						the guidance documentation to determine that the method of choosing a specific
						mode/key size by the end user is described.<h:p/>
					</Guidance>
					<KMD>
						The evaluator shall examine the KMD to ensure that it describes when the key
						wrapping occurs, that the KMD description is consistent with the description in the
						TSS, and that for all keys that are wrapped the TOE uses a method as described in
						the cPP table. No uncertainty should be left over which is the wrapping key and the
						key to be wrapped and where the wrapping key potentially comes from i.e. is
						derived from.<h:p/>
						If “AES-GCM” or “AES-CCM” is used the evaluator shall examine the KMD to
						ensure that it describes how the IV is generated and that the same IV is never reused
						to encrypt different plaintext pairs under the same key. Moreover in the case of
						GCM, he must ensure that, at each invocation of GCM, the length of the plaintext
						is at most (2^32)-2 blocks.<h:p/>
					</KMD>
					<Tests>
						Refer to FCS_COP.1/SKC for the required testing for each symmetric key wrapping
						method selected from the table and to FCS_COP.1/KAT for the required testing for
						each asymmetric key wrapping method selected from the table. Each distinct
						implementation shall be tested separately.<h:p/>
						If the implementation of the key encryption operation is the same implementation
						tested under FCS_COP.1/SKC or FCS_COP.1/KAT, and it has been tested with the
						same key lengths and modes, then no further testing is required. If key encryption
						uses a different implementation, (where “different implementation” includes the use
						of different key lengths or modes), then the evaluator shall additionally test the key
						encryption implementation using the corresponding tests specified for
						FCS_COP.1/SKC or FCS_COP.1/KAT.<h:p/>
					</Tests>
				</aactivity>
			</f-element>
		</f-component>
		
	<f-component cc-id="fcs_cop.1" iteration="pbkdf" name="Cryptographic Operation (Password-Based Key Derivation Functions)">
		<f-element id="fcs-cop-1e1-pbkdf">
			<title>The TSF shall perform [<h:i>password-based key derivation functions</h:i>] in
				accordance with a specified cryptographic algorithm [<h:i>HMAC-</h:i>
				<selectables>
					<selectable>SHA-256</selectable>
					<selectable>SHA-384</selectable>
					<selectable>SHA-512</selectable>
				</selectables>], with <assignable>integer number greater than or equal to 1000</assignable>
				iterations, and output cryptographic key sizes 
				<selectables>
					<selectable>128</selectable>
					<selectable>192</selectable>
					<selectable>256</selectable>
				</selectables>bits that meet the following standard: [<h:i>NIST SP 800-132</h:i>].
			</title>
			<note role="application">
				The ST must condition a password into a string of bits prior to using it as input to algorithms that
				form SKs and KEKs. The ST can perform conditioning using one of the identified hash functions
				or the process described in NIST SP 800-132; the ST author selects the method used. NIST SP
				800-132 requires the use of a pseudo-random function (PRF) consisting of HMAC with an
				approved hash function.<h:p/>
				Appendix A of NIST SP 800-132 recommends setting the iteration count in order to increase the
				computation needed to derive a key from a password and, therefore, increase the workload of
				performing a dictionary attack.<h:p/>
				The TOE must claim this requirement if it claims FCS_CKM.1/SK and selects an algorithm in the
				PBK row or claims FCS_CKM_EXT.5 and selects at least one of KeyDrv4, KeyDrv5, or KeyDrv6
				AND uses password-based key derivation to create at least one of the inputs.<h:p/>
			</note>
			<aactivity>
				<no-tests/>
			</aactivity>
		</f-element>
	</f-component>		  
		  
	<f-component cc-id="fcs_cop.1" iteration="SigGen" name="Cryptographic Operation (Signature Generation)">
		<f-element id="fcs-cop-1e1-siggen">
			<title>
				The TSF shall perform [<h:i>digital signature generation</h:i>] using the supported methods 
				for signature generation defined in the following rows of <xref to="fcs-cop-siggen-sels"/>
				<selectables>
					<selectable id="sel-fcs-cop-siggen-1">SigGen1</selectable>
					<selectable id="sel-fcs-cop-siggen-2">SigGen2</selectable>
					<selectable id="sel-fcs-cop-siggen-3">SigGen3</selectable>
					<selectable id="sel-fcs-cop-siggen-4">SigGen4</selectable>
					<selectable id="sel-fcs-cop-siggen-5">SigGen5</selectable>
				</selectables>.<h:p/>
				
				<h:b><ctr ctr-type='Table' id="fcs-cop-siggen-sels">: Supported Methods for Signature Generation Operation</ctr></h:b><h:br/>	
				<h:table>
					<h:tr class="header"><h:td>Identifier</h:td><h:td>Cryptographic Algorithm</h:td>
					<h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>
					
					<h:tr><depends on-sel="sel-fcs-cop-siggen-1"/>
					<h:td>SigGen1</h:td>
					<h:td>RSASSA-PKCS1-v1_5 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						<selectables>
							<selectable>RFC 8017</selectable>
							<selectable>PKCS #1 v2.2 (Section 8.2)</selectable>
							<selectable>FIPS186-4, (Section 5.5)</selectable>
						</selectables>(RSASSA-PKCS1-v1_5)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-siggen-2"/>
					<h:td>SigGen2</h:td>
					<h:td>Digital signature scheme 2 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						ISO9796-2, (Clause 9) (Digital signature scheme 2)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-siggen-3"/>
					<h:td>SigGen3</h:td>
					<h:td>Digital signature scheme 3 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						ISO9796-2, (Clause 10) (Digital signature scheme 3)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-siggen-4"/>
					<h:td>SigGen4</h:td>
					<h:td>RSASSA-PSS using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						[RFC8017, PKCS#1v2.2 (Section 8.1)] (RSASSAPSS)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-siggen-5"/>
					<h:td>SigGen5</h:td>
					<h:td>ECDSA on 
						<selectables>
							<selectable>brainpoolP256r1</selectable>
							<selectable>brainpoolP384r1</selectable>
							<selectable>brainpoolP512r1</selectable>
							<selectable>NIST P-256</selectable>
							<selectable>NIST P-384</selectable>
							<selectable>NIST P-521</selectable>
						</selectables> using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						<selectables linebreak="yes">
							<selectable>
								<selectables>
									<selectable>ISO14888-3</selectable>
									<selectable>FIPS186-4 (Section 6)</selectable>
								</selectables>(EDCSA)</selectable>
							<selectable>RFC5639 (Section 3)(Brainpool Curves)</selectable>
							<selectable>FIPS186-4 (Appendix D.1.2) (NIST Curves)</selectable>
						</selectables><h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>
				</h:table>
			</title>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to ensure that all signature generation
					functions use the approved algorithms and key sizes.
				</TSS>
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are typically not found on factory products.<h:p/>
					Each section below contains tests the evaluators must perform for each selected
					digital signature scheme. Based on the assignments and selections in the
					requirement, the evaluators choose the specific activities that correspond to those
					selections.<h:p/>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are not found on the TOE in its evaluated
					configuration.<h:p/>
					<h:b>If SigGen1: RSASSA-PKCS1-v1_5or SigGen4: RSASSA-PSS is claimed:</h:b><h:p/>
					The below test is derived from The 186-4 RSA Validation System (RSA2VS).
					Updated 8 July 2014, Section 6.3, from the National Institute of Standards and
					Technology.<h:p/>
					To test the implementation of RSA signature generation the evaluator uses the
					system under test to generate signatures for 10 messages for each combination of
					modulus size and SHA algorithm. The evaluator then uses a known-good
					implementation and the associated public keys to verify the signatures.<h:p/>
					<h:b>If SigGen2: Digital Signature Scheme 2 (DSS2) or SigGen3: Digital Signature
					Scheme 3 (DSS3):</h:b><h:p/>
					To test the implementation of DSS2/3 signature generation the evaluator uses the
					system under test to generate signatures for 10 messages for each combination of
					SHA algorithm, hash size and key size. The evaluator them uses a known-good
					implementation and the associated public keys to verify the signatures.<h:p/>
					<h:b>If SigGen5: ECDSA is claimed:</h:b><h:p/>
					The below test is derived from The FIPS 186-4 Elliptic Curve Digital Signature
					Algorithm Validation System (ECDSA2VS). Updated 18 March 2014, Section 6.4,
					from the National Institute of Standards and Technology.<h:p/>
					To test the implementation of ECDSA signature generation the evaluator uses the
					system under test to generate signatures for 10 messages for each combination of
					curve, SHA algorithm, hash size, and key size. The evaluator then uses a known-good 
					implementation and the associated public keys to verify the signatures.<h:p/>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
		
	<f-component cc-id="fcs_cop.1" iteration="SigVer" name="Cryptographic Operation (Signature Verification)">
		<f-element id="fcs-cop-1e1-sigver">
			<title>
				The TSF shall perform [<h:i>digital signature verification</h:i>] using the supported methods 
				for signature verification defined in the following rows of <xref to="fcs-cop-sigver-sels"/>
				<selectables>
					<selectable id="sel-fcs-cop-sigver-1">SigVer1</selectable>
					<selectable id="sel-fcs-cop-sigver-2">SigVer2</selectable>
					<selectable id="sel-fcs-cop-sigver-3">SigVer3</selectable>
					<selectable id="sel-fcs-cop-sigver-4">SigVer4</selectable>
					<selectable id="sel-fcs-cop-sigver-5">SigVer5</selectable>
				</selectables>.<h:p/>
				
				<h:b><ctr ctr-type='Table' id="fcs-cop-sigver-sels">: Supported Methods for Signature Verification Operation</ctr></h:b><h:br/>	
				<h:table>
					<h:tr class="header"><h:td>Identifier</h:td><h:td>Cryptographic Algorithm</h:td>
					<h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>
					
					<h:tr><depends on-sel="sel-fcs-cop-sigver-1"/>
					<h:td>SigVer1</h:td>
					<h:td>RSASSA-PKCS1-v1_5 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						<selectables>
							<selectable>RFC 8017</selectable>
							<selectable>PKCS #1 v2.2 (Section 8.2)</selectable>
							<selectable>FIPS186-4, (Section 5.5)</selectable>
						</selectables>(RSASSA-PKCS1-v1_5)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-sigver-2"/>
					<h:td>SigVer2</h:td>
					<h:td>Digital signature scheme 2 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						ISO9796-2, (Clause 9) (Digital signature scheme 2)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-sigver-3"/>
					<h:td>SigVer3</h:td>
					<h:td>Digital signature scheme 3 using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						ISO9796-2, (Clause 10) (Digital signature scheme 3)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-sigver-4"/>
					<h:td>SigVer4</h:td>
					<h:td>RSASSA-PSS using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						[RFC8017, PKCS#1v2.2 (Section 8.1)] (RSASSAPSS)<h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>

				<h:tr><depends on-sel="sel-fcs-cop-sigver-5"/>
					<h:td>SigVer5</h:td>
					<h:td>ECDSA on 
						<selectables>
							<selectable>brainpoolP256r1</selectable>
							<selectable>brainpoolP384r1</selectable>
							<selectable>brainpoolP512r1</selectable>
							<selectable>NIST P-256</selectable>
							<selectable>NIST P-384</selectable>
							<selectable>NIST P-521</selectable>
						</selectables> using
						<selectables>
							<selectable>SHA-256</selectable>
							<selectable>SHA-384</selectable>
							<selectable>SHA-512</selectable>
							<selectable>SHA3-256</selectable>
							<selectable>SHA3-384</selectable>
							<selectable>SHA3-512</selectable>
						</selectables></h:td>
					<h:td><selectables>
						<selectable>2048 bit</selectable>
						<selectable>3072 bit</selectable>
					</selectables></h:td>
					<h:td>
						<selectables linebreak="yes">
							<selectable>
								<selectables>
									<selectable>ISO14888-3</selectable>
									<selectable>FIPS186-4 (Section 6)</selectable>
								</selectables>(EDCSA)</selectable>
							<selectable>RFC5639 (Section 3)(Brainpool Curves)</selectable>
							<selectable>FIPS186-4 (Appendix D.1.2) (NIST Curves)</selectable>
						</selectables><h:p/>
						<selectables>
							<selectable>ISO10118-3 (Clause 10, 11)</selectable>
							<selectable>FIPS180-4 (Section 6)</selectable>
						</selectables>(SHA)</h:td>
				</h:tr>
				</h:table>
			</title>
			<aactivity>
				<TSS>
					The evaluator shall check the TSS to ensure that it describes the overall flow of the
					signature verification. This should at least include identification of the format and
					general location (e.g., "firmware on the hard drive device" rather than “memory
					location 0x00007A4B") of the data to be used in verifying the digital signature; how
					the data received from the operational environment are brought onto the device; and
					any processing that is performed that is not part of the digital signature algorithm
					(for instance, checking of certificate revocation lists).
				</TSS>
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are typically not found on factory products.<h:p/>
					Each section below contains tests the evaluators must perform for each selected
					digital signature scheme. Based on the assignments and selections in the
					requirement, the evaluators choose the specific activities that correspond to those
					selections.<h:p/>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are not found on the TOE in its evaluated
					configuration.<h:p/>
					<h:b><h:i>SigVer1: RSASSA-PKCS1-v1_5 and SigVer4: RSASSA-PSS</h:i></h:b><h:p/>
					These tests are derived from The 186-4 RSA Validation System (RSA2VS),
					updated 8 Jul 2014, Section 6.4.<h:p/>
					The FIPS 186-4 RSA Signature Verification Test tests the ability of the TSF to
					recognize valid and invalid signatures. The evaluator shall provide a modulus and
					three associated key pairs (d, e) for each combination of selected SHA algorithm,
					modulus size and hash size. Each private key d is used to sign six pseudorandom
					messages each of 1024 bits. For five of the six messages, the public key (e),
					message, IR format, padding, or signature is altered so that signature verification
					should fail. The test passes only if all the signatures made using unaltered
					parameters result in successful signature verification, and all the signatures made
					using altered parameters result in unsuccessful signature verification.<h:p/>
					<h:b><h:i>SigVer5: ECDSA on NIST and Brainpool Curves</h:i></h:b><h:p/>
					These tests are derived from The FIPS 186-4 Elliptic Curve Digital Signature
					Algorithm Validation System (ECDSA2VS), updated 18 Mar 2014, Section 6.5.<h:p/>
					The FIPS 186-4 ECC Signature Verification Test tests the ability of the TSF to
					recognize valid and invalid signatures. The evaluator shall provide a modulus and
					associated key pair (x, y) for each combination of selected curve, SHA algorithm,
					modulus size, and hash size. Each private key (x) is used to sign 15 pseudorandom 
					messages of 1024 bits. For eight of the fifteen messages, the message, IR format,
					padding, or signature is altered so that signature verification should fail. The test
					passes only if all the signatures made using unaltered parameters result in successful
					signature verification, and all the signatures made using altered parameters result in
					unsuccessful signature verification.<h:p/>
					<h:b><h:i>SigVer2: Digital Signature Scheme 2</h:i></h:b><h:p/>
					The following or equivalent steps shall be taken to test the TSF.<h:p/>
					For each supported modulus size, underlying hash algorithm, and length of the
					trailer field (1- or 2-byte), the evaluator shall generate NT sets of recoverable
					message (M1), non-recoverable message (M2), salt, public key and signature (<h:i>&#931;</h:i>).<h:p/>
					<h:ol type="1">
						<h:li><h:i>N<h:sub>T</h:sub></h:i> shall be greater than or equal to 20.</h:li>
						<h:li>The length of salts shall be selected from its supported length range of salt.
							The typical length of salt is equal to the output block length of underlying
							hash algorithm (see 9.2.2 of ISO/IEC 9796-2:2010).</h:li>
						<h:li>The length of recoverable messages should be selected by considering
							modulus size, output block length of underlying hash algorithm, and length
							of salt (<h:i>L<h:sub>S</h:sub></h:i>). As described in Annex D of ISO/IEC 9796-2:2010, it is desirable
							to maximise the length of recoverable message. The following table shows
							the maximum bit-length of recoverable message that is divisible by 512, for
							some combinations of modulus size, underlying hash algorithm, and length
							of salt.
							<h:table class="classic" style="width:50%">
								<h:tr class="header"><h:td>Maximum length of recoverable message divisible by 512 (bits)</h:td>
								<h:td>Modulus size (bits)</h:td>
								<h:td>Underlying hash algorithm (bits)</h:td>
								<h:td>Length of salt L<h:sub>S</h:sub> (bits)</h:td></h:tr>
					
								<h:tr><h:td>1536</h:td><h:td rowspan="5">2048</h:td><h:td rowspan="2">SHA-256</h:td><h:td>128</h:td></h:tr>
								<h:tr><h:td>1024</h:td><h:td>256</h:td></h:tr>
								<h:tr><h:td>1024</h:td><h:td rowspan="3">SHA-512</h:td><h:td>128</h:td></h:tr>
								<h:tr><h:td>1024</h:td><h:td>256</h:td></h:tr>
								<h:tr><h:td>512</h:td><h:td>512</h:td></h:tr>
								<h:tr><h:td>2560</h:td><h:td rowspan="5">3072</h:td><h:td rowspan="2">SHA-256</h:td><h:td>128</h:td></h:tr>
								<h:tr><h:td>2048</h:td><h:td>256</h:td></h:tr>
								<h:tr><h:td>2048</h:td><h:td rowspan="3">SHA-512</h:td><h:td>128</h:td></h:tr>
								<h:tr><h:td>2048</h:td><h:td>256</h:td></h:tr>
								<h:tr><h:td>1536</h:td><h:td>512</h:td></h:tr>
								<h:tr colspan="4">None that 2-byte trailer field is assumed in calculating the maximum length of recoverable message</h:tr>
							</h:table></h:li>
						<h:li>The length of non-recoverable messages should be selected by considering
							the underlying hash algorithm and usages. If the TSF is used for verifying
							the authenticity of software/firmware updates, the length of non-recoverable
							messages should be selected greater than or equal to 2048-bit. With this
							length range, it means that the underlying hash algorithm is also tested for
							two or more input blocks.</h:li>
						<h:li>The evaluator shall select approximately one half of <h:i>N<h:sub>T</h:sub></h:i> sets and shall alter
							one of the values (non-recoverable message, public key exponent or
							signature) in the sets. In altering public key exponent, the evaluator shall
							alter the public key exponent while keeping the exponent odd. In altering
							signatures, the following ways should be considered:
							<h:ol type="a">
								<h:li>Altering a signature just by replacing a bit in the bit-string representation
									of the signature</h:li>
								<h:li>Altering a signature so that the trailer in the message representative
									cannot be interpreted. This can be achieved by following ways:<h:ul>
									<h:li>Setting the rightmost four bits of the message representative to the
										values other than '1100'.</h:li>
									<h:li>In the case when 1-byte trailer is used, setting the rightmost byte of
										the message representative to the values other than '0xbc', while
										keeping the rightmost four bits to '1100'.</h:li>
									<h:li>In the case when 2-byte trailer is used, setting the rightmost byte of
										the message representative to the values other than '0xcc', while
										keeping the rightmost four bits to '1100'.</h:li></h:ul></h:li>
								<h:li>In the case when 2-byte trailer is used, altering a signature so that the
									hash algorithm identifier in the trailer (i.e. the left most byte of the
									trailer) does not correspond to hash algorithms identified in the SFR.
									The hash algorithm identifiers are 0x34 for SHA-256 (see Clause 10 of
									ISO/IEC 10118-3:2018), and 0x35 for SHA-512 (see Clause 11 of
									ISO/IEC 10118-3:2018).</h:li>
								<h:li>Let <h:i>L<h:sub>S</h:sub></h:i> be the length of salt, altering a signature so that the intermediate
									bit string <h:i>D</h:i> in the message representative is set to all zeroes except for
									the rightmost <h:i>L<h:sub>S</h:sub></h:i> bits of <h:i>D</h:i>.</h:li>
								<h:li> (non-conformant signature length) Altering a signature so that the length
									of signature <h:i>&#931;</h:i> is changed to modulus size and the most significant bit of
									signature <h:i>&#931;</h:i> is set equal to '1'.</h:li>
								<h:li>(non-conformant signature) Altering a signature so that the integer
									converted from signature <h:i>&#931;</h:i> is greater than modulus <h:i>n</h:i>.</h:li>
							</h:ol>
						</h:li>
					</h:ol>
					The evaluator shall supply the NT sets to the TSF and obtain in response a set of
					NT Verification-Success or Verification-Fail values. When the VerificationSuccess is 
					obtained, the evaluator shall also obtain recovered message (M 1*).<h:p/>
					The evaluator shall verify that Verification-Success results correspond to the
					unaltered sets and Verification-Fail results correspond to the altered sets.<h:p/>
					For each recovered message, the evaluator shall compare the recovered message
					(M1*) with the corresponding recoverable message (M 1) in the unaltered sets.<h:p/>
					The test passes only if all the signatures made using unaltered sets result in
					Verification-Success, each recovered message (M 1*) is equal to corresponding M 
					1 in the unaltered sets, and all the signatures made using altered sets result in
					Verification-Fail.<h:p/>
					<h:b><h:i>SigVer3: Digital Signature Scheme 3</h:i></h:b><h:p/>
					The evaluator shall perform the test described in SigVer2: Digital Signature Scheme
					2 while using a fixed salt for NT sets.<h:p/>
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
		
	<f-component cc-id="fcs_cop.1" iteration="SKC" name="Cryptographic Operation (Symmetric Key Cryptography)">
		<f-element id="fcs-cop-1e1-skc">
			<title>
				The TSF shall perform [<h:i>data encryption/decryption</h:i>] using the supported symmetric-key cryptography
				methods defined in the following rows of <xref to="fcs-cop-skc-sels"/>
				<selectables>
					<selectable id="sel-fcs-cop-skc-aes-ccm">AES-CCM</selectable>
					<selectable id="sel-fcs-cop-skc-aes-gcm">AES-GCM</selectable>
					<selectable id="sel-fcs-cop-skc-aes-cbc">AES-CBC</selectable>
					<selectable id="sel-fcs-cop-skc-aes-ctr">AES-CTR</selectable>
					<selectable id="sel-fcs-cop-skc-xts-aes">XTS-AES</selectable>
					<selectable id="sel-fcs-cop-skc-aes-kwp">AES-KWP</selectable>
					<selectable id="sel-fcs-cop-skc-aes-kw">AES-KW</selectable>
					<selectable id="sel-fcs-cop-skc-cam-cbs">CAM-CBC</selectable>
					<selectable id="sel-fcs-cop-skc-cam-ccm">CAM-CCM</selectable>
					<selectable id="sel-fcs-cop-skc-cam-gcm">CAM-GCM</selectable>
					<selectable id="sel-fcs-cop-skc-xts-cam">XTS-CAM</selectable>
				</selectables>.<h:p/>
				<h:b><ctr ctr-type='Table' id="fcs-cop-skc-sels">: Supported Methods for Symmetric Key Cryptography Operation</ctr></h:b><h:br/>	
				<h:table>
					<h:tr class="header"><h:td>Identifier</h:td><h:td>Cryptographic Algorithm</h:td>
					<h:td>Key Sizes</h:td><h:td>List of Standards</h:td></h:tr>
					
					<h:tr><depends on-sel="sel-fcs-cop-skc-aes-ccm"/>
					<h:td>AES-CCM</h:td>
					<h:td>AES in CCM mode with unpredictable, nonrepeating nonce, minimum size of 64 bits</h:td>
					<h:td><selectables>
						<selectable>128 bits</selectable>
						<selectable>192 bits</selectable>
						<selectable>256 bits</selectable>
					</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						ISO 19772, Clause 8 (CCM)<h:p/>
						NIST SP800-38C (CCM)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel-fcs-cop-skc-aes-gcm"/>
					<h:td>AES-GCM</h:td>
					<h:td>AES in GCM mode with non-repeating IVs; IV length must be equal to 96
						bits; the deterministic IV construction method (SP800-38D, Section 8.2.1) must
						be used; the MAC length t must be one of the values 
						<selectables>
							<selectable>96</selectable>
							<selectable>104</selectable>
							<selectable>112</selectable>
							<selectable>120</selectable>
							<selectable>128</selectable>
						</selectables></h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>192 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						ISO 19772, Clause 11 (GCM)<h:p/>
						NIST SP800-38D (GCM)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel-fcs-cop-skc-aes-cbc"/>
					<h:td>AES-CBC</h:td>
					<h:td>AES in CBC mode with non-repeating and unpredictable IVs</h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>192 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						ISO 10116 (CBC)<h:p/>
						NIST SP800-38A (CBC)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel-fcs-cop-skc-aes-ctr"/>
					<h:td>AES-CTR</h:td>
					<h:td>AES in counter mode with a non-repeating initial counter and with no
						repeated use of counter values across multiple messages with the same
						secret key</h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>192 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						ISO 10116 (CTR)<h:p/>
						NIST SP800-38A (CTR)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel-fcs-cop-skc-xts-aes"/>
					<h:td>XTS-AES</h:td>
					<h:td>AES in XTS mode with unique 
						<selectables>
							<selectable>consecutive non-negative integers starting at an
								arbitrary non-negative integer</selectable>
							<selectable>data unit sequence numbers</selectable>
						</selectables> tweak values</h:td>
					<h:td><selectables>
							<selectable>256 bits</selectable>
							<selectable>512 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						<selectables>
							<selectable>IEEE 1619</selectable>
							<selectable>NIST SP800-38E</selectable>
						</selectables>(XTS)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel-fcs-cop-skc-aes-kwp"/>
					<h:td>AES-KWP</h:td>
					<h:td>KWP based on AES </h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>192 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						NIST SP 800-38F, sec. 6.3 (KWP)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel-fcs-cop-skc-aes-kw"/>
					<h:td>AES-KW</h:td>
					<h:td>KW based on AES </h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>192 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (AES)<h:p/>
						NIST SP 800-38F, sec. 6.2 (KW)<h:p/>
						ISO/IEC 19772, clause 7 (key wrap)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel-fcs-cop-skc-cam-cbc"/>
					<h:td>CAM-CBC</h:td>
					<h:td>Camellia in CBC mode with non-repeating and unpredictable IVs</h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (Camellia)<h:p/>
						ISO 10116 (CBC)<h:p/></h:td>
					</h:tr>

					<h:tr><depends on-sel="sel-fcs-cop-skc-cam-ccm"/>
					<h:td>CAM-CCM</h:td>
					<h:td>Camellia in CCM mode with unpredictable, nonrepeating nonce, minimum size of 64 bits</h:td>
					<h:td><selectables>
						<selectable>128 bits</selectable>
						<selectable>256 bits</selectable>
					</selectables></h:td>
					<h:td>
						ISO 18033-3 (Camellia)<h:p/>
						ISO 19772, Clause 8 (CCM)<h:p/>
						NIST SP800-38C (CCM)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel-fcs-cop-skc-cam-gcm"/>
					<h:td>CAM-GCM</h:td>
					<h:td>Camellia in GCM mode with non-repeating IVs; IV length must be equal to 96
						bits; the deterministic IV construction method (SP800-38D, Section 8.2.1) must
						be used; the MAC length t must be one of the values 
						<selectables>
							<selectable>96</selectable>
							<selectable>104</selectable>
							<selectable>112</selectable>
							<selectable>120</selectable>
							<selectable>128</selectable>
						</selectables></h:td>
					<h:td><selectables>
							<selectable>128 bits</selectable>
							<selectable>256 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (Camellia)<h:p/>
						ISO 19772, Clause 11 (GCM)<h:p/>
						NIST SP800-38D (GCM)</h:td>
					</h:tr>

					<h:tr><depends on-sel="sel-fcs-cop-skc-xts-cam"/>
					<h:td>XTS-CAM</h:td>
					<h:td>Camellia in XTS mode with unique 
						<selectables>
							<selectable>consecutive non-negative integers starting at an
								arbitrary non-negative integer</selectable>
							<selectable>data unit sequence numbers</selectable>
						</selectables> tweak values</h:td>
					<h:td><selectables>
							<selectable>256 bits</selectable>
							<selectable>512 bits</selectable>
						</selectables></h:td>
					<h:td>
						ISO 18033-3 (Camellia)<h:p/>
						<selectables>
							<selectable>IEEE 1619</selectable>
							<selectable>NIST SP800-38E</selectable>
						</selectables>(XTS)</h:td>
					</h:tr>
				</h:table>
			</title>
			<aactivity>
				<TSS>
					The evaluator shall check that the TSS includes a description of encryption
					functions used for symmetric key encryption. The evaluator should check that this
					description of the selected encryption function includes the key sizes and modes of
					operations as specified in the cPP table 9 “Supported Methods for Symmetric Key
					Cryptography Operation.”<h:p/>
					The evaluator shall check that the TSS describes the means by which the TOE
					satisfies constraints on algorithm parameters included in the selections made for
					‘cryptographic algorithm’ and ‘list of standards’.<h:p/> 
				</TSS>
				<Guidance>
					If the product supports multiple modes, the evaluator shall examine the vendor’s
					documentation to determine that the method of choosing a specific mode/key size
					by the end user is described.
				</Guidance>
				<KMD>
					The evaluator shall examine the KMD to ensure that the points at which symmetric
					key encryption and decryption occurs are described, and that the complete data path
					for symmetric key encryption is described. The evaluator checks that this
					description is consistent with the relevant parts of the TSS.<h:p/>
					Assessment of the complete data path for symmetric key encryption includes
					confirming that the KMD describes the data flow from the device’s host interface
					to the device’s non-volatile memory storing the data, and gives information
					enabling the user data datapath to be distinguished from those situations in which
					data bypasses the data encryption engine (e.g. read-write operations to an
					unencrypted Master Boot Record area). The evaluator shall ensure that the
					documentation of the data path is detailed enough that it thoroughly describes the
					parts of the TOE that the data passes through (e.g. different memory types,
					processors and co-processors), its encryption state (i.e. encrypted or unencrypted)
					in each part, and any places where the data is stored. For example, any caching or
					buffering of the data should be identified and distinguished from the final
					destination in non-volatile memory (the latter represents the location from which
					the host will expect to retrieve the data in future).<h:p/>
					If support for AES-CTR is claimed and the counter value source is internal to the
					TOE, the evaluator shall verify that the KMD describes the internal counter
					mechanism used to ensure that it provides unique counter block values.<h:p/>
				</KMD>
				<Tests>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are typically not found on factory products.<h:p/>
					The following tests are conditional based upon the selections made in the SFR. The
					evaluator shall perform the following test or witness respective tests executed by
					the developer. The tests must be executed on a platform that is as close as practically
					possible to the operational platform (but which may be instrumented in terms of,
					for example, use of a debug mode). Where the test is not carried out on the TOE
					itself, the test platform shall be identified and the differences between test
					environment and TOE execution environment shall be described.<h:p/>
					Preconditions for testing:<h:ul>
					<h:li>Specification of keys as input parameter to the function to be tested</h:li>
					<h:li>specification of required input parameters such as modes</h:li>
					<h:li>Specification of user data (plaintext)</h:li>
					<h:li>Tapping of encrypted user data (ciphertext) directly in the non-volatile memory</h:li></h:ul>
					<h:p/>
					<h:b>AES-CBC:</h:b><h:br/>
					For the AES-CBC tests described below, the plaintext, ciphertext, and IV values
					shall consist of 128-bit blocks. To determine correctness, the evaluator shall
					compare the resulting values to those obtained by submitting the same inputs to a
					known-good implementation.<h:p/>
					These tests are intended to be equivalent to those described in NIST’s AES Algorithm Validation Suite (AESAVS)
					(<h:a href="http://csrc.nist.gov/groups/STM/cavp/documents/aes/AESAVS.pdf">
					http://csrc.nist.gov/groups/STM/cavp/documents/aes/AESAVS.pdf</h:a>). It is not
					recommended that evaluators use values obtained from static sources such as the
					example NIST’s AES Known Answer Test Values from the AESAVS document,
					or use values not generated expressly to exercise the AES-CBC implementation.<h:p/>
					<h:b><h:i>AES-CBC Known Answer Tests</h:i></h:b><h:p/>
					<h:u>KAT-1 (GFSBox):</h:u> To test the encrypt functionality of AES-CBC, the evaluator
					shall supply a set of five different plaintext values for each selected key size and
					obtain the ciphertext value that results from AES-CBC encryption of the given
					plaintext using a key value of all zeros and an IV of all zeros.<h:p/>
					To test the decrypt functionality of AES-CBC, the evaluator shall supply a set of
					five different ciphertext values for each selected key size and obtain the plaintext
					value that results from AES-CBC decryption of the given ciphertext using a key
					value of all zeros and an IV of all zeros.<h:p/>
					<h:u>KAT-2 (KeySBox):</h:u> To test the encrypt functionality of AES-CBC, the evaluator
					shall supply a set of five different key values for each selected key size and obtain
					the ciphertext value that results from AES-CBC encryption of an all-zeros plaintext
					using the given key value and an IV of all zeros.<h:p/>
					To test the decrypt functionality of AES-CBC, the evaluator shall supply a set of
					five different key values for each selected key size and obtain the plaintext that
					results from AES-CBC decryption of an all-zeros ciphertext using the given key
					and an IV of all zeros.<h:p/>
					<h:u>KAT-3 (Variable Key):</h:u> To test the encrypt functionality of AES-CBC, the evaluator
					shall supply a set of keys for each selected key size (as described below) and obtain
					the ciphertext value that results from AES encryption of an all-zeros plaintext using
					each key and an IV of all zeros.<h:p/>
					Key i in each set shall have the leftmost i bits set to ones and the remaining bits to
					zeros, for values of i from 1 to the key size. The keys and corresponding ciphertext
					are listed in AESAVS, Appendix E.<h:p/>
					To test the decrypt functionality of AES-CBC, the evaluator shall use the same keys
					as above to decrypt the ciphertext results from above. Each decryption should result
					in an all-zeros plaintext.<h:p/>
					<h:u>KAT-4 (Variable Text):</h:u> To test the encrypt functionality of AES-CBC, for each
					selected key size, the evaluator shall supply a set of 128-bit plaintext values (as 
					described below) and obtain the ciphertext values that result from AES-CBC
					encryption of each plaintext value using a key of each size and IV consisting of all
					zeros.<h:p/>
					Plaintext value i shall have the leftmost i bits set to ones and the remaining bits set
					to zeros, for values of i from 1 to 128. The plaintext values are listed in AESAVS,
					Appendix D.<h:p/>
					To test the decrypt functionality of AES-CBC, for each selected key size, use the
					plaintext values from above as ciphertext input, and AES-CBC decrypt each
					ciphertext value using key of each size consisting of all zeros and an IV of all zeros.<h:p/>
					<h:b><h:i>AES-CBC Multi-Block Message Test</h:i></h:b><h:p/>
					The evaluator shall test the encrypt functionality by encrypting nine i-block
					messages for each selected key size, for 2 &#8804; i &#8804; 10. For each test, the 
					evaluator shall supply a key, an IV, and a plaintext message of length i blocks, and encrypt the
					message using AES-CBC. The resulting ciphertext values shall be compared to the
					results of encrypting the plaintext messages using a known good implementation.<h:p/>
					The evaluator shall test the decrypt functionality by decrypting nine i-block
					messages for each selected key size, for 2 &#8804; i &#8804; 10. For each test, the evaluator shall
					supply a key, an IV, and a ciphertext message of length i blocks, and decrypt the
					message using AES-CBC. The resulting plaintext values shall be compared to the
					results of decrypting the ciphertext messages using a known good implementation.<h:p/>
					<h:b><h:i>AES-CBC Monte Carlo Tests</h:i></h:b><h:p/>
					The evaluator shall test the encrypt functionality for each selected key size using
					100 3-tuples of pseudo-random values for plaintext, IVs, and keys.<h:p/>
					The evaluator shall supply a single 3-tuple of pseudo-random values for each
					selected key size. This 3-tuple of plaintext, IV, and key is provided as input to the
					below algorithm to generate the remaining 99 3-tuples, and to run each 3-tuple
					through 1000 iterations of AES-CBC encryption.<h:p/>
					<h:pre>
						# Input: PT, IV, Key
						Key[0] = Key
						IV[0] = IV
						PT[0] = PT
						for i = 0 to 99 {
							Output Key[i], IV[i], PT[0]
							for j = 0 to 999 {
								if (j == 0) {
									CT[j] = AES-CBC-Encrypt(Key[i], IV[i], PT[j])
									PT[j+1] = IV[i]
								} else {
									CT[j] = AES-CBC-Encrypt(Key[i], PT[j])
									PT[j+1] = CT[j-1]
								}
							}
							Output CT[j]
							If (KeySize == 128) Key[i+1] = Key[i] xor CT[j] 
							If (KeySize == 192) Key[i+1] = Key[i] xor (last 64 bits of CT[j-1] || CT[j])
							If (KeySize == 256) Key[i+1] = Key[i] xor ((CT[j-1] | CT[j])
							IV[i+1] = CT[j]
							PT[0] = CT[j-1]
						}
					</h:pre><h:p/>
					The ciphertext computed in the 1000th iteration (CT[999]) is the result for each of
					the 100 3-tuples for each selected key size. This result shall be compared to the
					result of running 1000 iterations with the same values using a known good
					implementation.<h:p/>
					The evaluator shall test the decrypt functionality using the same test as above,
					exchanging CT and PT, and replacing AES-CBC-Encrypt with AES-CBC-Decrypt.<h:p/>
					<h:b>AES-CCM:</h:b><h:p/>
					These tests are intended to be equivalent to those described in the NIST document,
					“The CCM Validation System (CCMVS),” updated 9 Jan 2012, found at
					<h:a href="http://csrc.nist.gov/groups/STM/cavp/documents/mac/CCMVS.pdf">
					http://csrc.nist.gov/groups/STM/cavp/documents/mac/CCMVS.pdf</h:a>.<h:p/>
					It is not recommended that evaluators use values obtained from static sources such
					as http://csrc.nist.gov/groups/STM/cavp/documents/mac/ccmtestvectors.zip or use
					values not generated expressly to exercise the AES-CCM implementation.<h:p/>
					The evaluator shall test the generation-encryption and decryption-verification
					functionality of AES-CCM for the following input parameter and tag lengths:<h:p/><h:ul>
					<h:li><h:b>Keys:</h:b> All supported and selected key sizes (e.g., 128, 192, or 256 bits).</h:li>
					<h:li><h:b>Associated Data:</h:b> Two or three values for associated data length: The minimum
					(&#8805; 0 bytes) and maximum (&#8804; 32 bytes) supported associated data lengths, and
					2^16 (65536) bytes, if supported.</h:li>
					<h:li><h:b>Payload:</h:b> Two values for payload length: The minimum (&#8805; 0 bytes) and
					maximum (&#8804; 32 bytes) supported payload lengths.</h:li>
					<h:li><h:b>Nonces:</h:b> All supported nonce lengths (e.g., 8, 9, 10, 11, 12, 13) in bytes.</h:li>
					<h:li><h:b>Tag:</h:b> All supported tag lengths (e.g., 4, 6, 8, 10, 12, 14, 16) in bytes.</h:li></h:ul>
					The testing for CCM consists of five tests. To determine correctness in each of the
					below tests, the evaluator shall compare the ciphertext with the result of encryption
					of the same inputs with a known good implementation.<h:p/>
					Variable Associated Data Test: For each supported key size and associated data
					length, and any supported payload length, nonce length, and tag length, the
					evaluator shall supply one key value, one nonce value, and 10 pairs of associated
					data and payload values, and obtain the resulting ciphertext.<h:p/>
					Variable Payload Text: For each supported key size and payload length, and any
					supported associated data length, nonce length, and tag length, the evaluator shall 
					supply one key value, one nonce value, and 10 pairs of associated data and payload
					values, and obtain the resulting ciphertext.<h:p/>
					Variable Nonce Test: For each supported key size and nonce length, and any
					supported associated data length, payload length, and tag length, the evaluator shall
					supply one key value, one nonce value, and 10 pairs of associated data and payload
					values, and obtain the resulting ciphertext.<h:p/>
					Variable Tag Test: For each supported key size and tag length, and any supported
					associated data length, payload length, and nonce length, the evaluator shall supply
					one key value, one nonce value, and 10 pairs of associated data and payload values,
					and obtain the resulting ciphertext.<h:p/>
					Decryption-Verification Process Test: To test the decryption-verification
					functionality of AES-CCM, for each combination of supported associated data
					length, payload length, nonce length, and tag length, the evaluator shall supply a
					key value and 15 sets of input plus ciphertext, and obtain the decrypted payload.
					Ten of the 15 input sets supplied should fail verification and five should pass.<h:p/>
					<h:b>AES-GCM:</h:b>
					These tests are intended to be equivalent to those described in the NIST document,
					“The Galois/Counter Mode (GCM) and GMAC Validation System (GCMVS) with
					the Addition of XPN Validation Testing,” rev. 15 Jun 2016, section 6.2, found at
					<h:a href="http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmvs.pdf">
					http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmvs.pdf</h:a>.<h:p/>
					It is not recommended that evaluators use values obtained from static sources such
					as http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmtestvectors.zip, or use
					values not generated expressly to exercise the AES-GCM implementation.<h:p/>
					The evaluator shall test the authenticated encryption functionality of AES-GCM by
					supplying 15 sets of Key, Plaintext, AAD, IV, and Tag data for every combination
					of the following parameters as selected in the ST and supported by the
					implementation under test:<h:ul>
					<h:li><h:b>Key size in bits:</h:b> Each selected and supported key size (e.g., 128, 192, or
					256 bits).</h:li>
					<h:li><h:b>Plaintext length in bits:</h:b> Up to four values for plaintext length: Two values
					that are non-zero integer multiples of 128, if supported. And two values that
					are non-multiples of 128, if supported.</h:li>
					<h:li><h:b>AAD length in bits:</h:b> Up to five values for AAD length: Zero-length, if
					supported. Two values that are non-zero integer multiples of 128, if
					supported. And two values that are integer non-multiples of 128, if
					supported.</h:li>
					<h:li><h:b>IV length in bits:</h:b> Up to three values for IV length: 96 bits. Minimum and
					maximum supported lengths, if different.</h:li>
					<h:li><h:b>MAC length in bits:</h:b> Each supported length (e.g., 128, 120, 112, 104, 96).</h:li></h:ul>
					To determine correctness, the evaluator shall compare the resulting values to those
					obtained by submitting the same inputs to a known-good implementation.<h:p/>
					The evaluator shall test the authenticated decrypt functionality of AES-GCM by
					supplying 15 Ciphertext-Tag pairs for every combination of the above parameters,
					replacing Plaintext length with Ciphertext length. For each parameter combination
					the evaluator shall introduce an error into either the Ciphertext or the Tag such that
					approximately half of the cases are correct and half the cases contain errors. To
					determine correctness, the evaluator shall compare the resulting pass/fail status and
					Plaintext values to the results obtained by submitting the same inputs to a known-good
					implementation.<h:p/>
					<h:b>AES-CTR:</h:b><h:p/>
					For the AES-CTR tests described below, the plaintext and ciphertext values shall
					consist of 128-bit blocks. To determine correctness, the evaluator shall compare the
					resulting values to those obtained by submitting the same inputs to a known-good
					implementation.<h:p/>
					These tests are intended to be equivalent to those described in NIST’s AES
					Algorithm Validation Suite (AESAVS)
					(<h:a href="http://csrc.nist.gov/groups/STM/cavp/documents/aes/AESAVS.pdf">
					http://csrc.nist.gov/groups/STM/cavp/documents/aes/AESAVS.pdf</h:a>). It is not
					recommended that evaluators use values obtained from static sources such as the
					example NIST’s AES Known Answer Test Values from the AESAVS document,
					or use values not generated expressly to exercise the AES-CTR implementation.<h:p/>
					<h:b><h:i>AES-CTR Known Answer Tests</h:i></h:b><h:p/>
					<h:u>KAT-1 (GFSBox):</h:u> To test the encrypt functionality of AES-CTR, the evaluator
					shall supply a set of five different plaintext values for each selected key size and
					obtain the ciphertext value that results from AES-CTR encryption of the given
					plaintext using a key value of all zeros.<h:p/>
					To test the decrypt functionality of AES-CTR, the evaluator shall supply a set of
					five different ciphertext values for each selected key size and obtain the plaintext
					value that results from AES-CTR decryption of the given ciphertext using a key
					value of all zeros.<h:p/>
					<h:u>KAT-2 (KeySBox):</h:u> To test the encrypt functionality of AES-CTR, the evaluator
					shall supply a set of five different key values for each selected key size and obtain
					the ciphertext value that results from AES-CTR encryption of an all-zeros plaintext
					using the given key value.<h:p/>
					To test the decrypt functionality of AES-CTR, the evaluator shall supply a set of
					five different key values for each selected key size and obtain the plaintext that
					results from AES-CTR decryption of an all-zeros ciphertext using the given key.<h:p/>
					<h:u>KAT-3 (Variable Key):</h:u> To test the encrypt functionality of AES-CTR, the evaluator
					shall supply a set of keys for each selected key size (as described below) and obtain
					the ciphertext value that results from AES encryption of an all-zeros plaintext using
					each key.<h:p/>
					Key i in each set shall have the leftmost i bits set to ones and the remaining bits to
					zeros, for values of i from 1 to the key size. The keys and corresponding ciphertext
					are listed in AESAVS, Appendix E.<h:p/>
					To test the decrypt functionality of AES-CTR, the evaluator shall use the same keys
					as above to decrypt the ciphertext results from above. Each decryption should result
					in an all-zeros plaintext.<h:p/>
					<h:u>KAT-4 (Variable Text):</h:u> To test the encrypt functionality of AES-CTR, for each
					selected key size, the evaluator shall supply a set of 128-bit plaintext values (as
					described below) and obtain the ciphertext values that result from AES-CTR
					encryption of each plaintext value using a key of each size.<h:p/>
					Plaintext value i shall have the leftmost i bits set to ones and the remaining bits set
					to zeros, for values of i from 1 to 128. The plaintext values are listed in AESAVS,
					Appendix D.<h:p/>
					To test the decrypt functionality of AES-CTR, for each selected key size, use the
					plaintext values from above as ciphertext input, and AES-CTR decrypt each
					ciphertext value using key of each size consisting of all zeros.<h:p/>
					<h:b><h:i>AES-CTR Multi-Block Message Test</h:i></h:b><h:p/>
					The evaluator shall test the encrypt functionality by encrypting nine i-block
					messages for each selected key size, for 2 &#8804; i &#8804; 10. For each test, the evaluator shall
					supply a key and a plaintext message of length i blocks, and encrypt the message
					using AES-CTR. The resulting ciphertext values shall be compared to the results of
					encrypting the plaintext messages using a known good implementation.<h:p/>
					The evaluator shall test the decrypt functionality by decrypting nine i-block
					messages for each selected key size, for 2 &#8804; i &#8804; 10. For each test, the evaluator shall
					supply a key and a ciphertext message of length i blocks, and decrypt the message
					using AES-CTR. The resulting plaintext values shall be compared to the results of
					decrypting the ciphertext messages using a known good implementation.<h:p/>
					<h:b><h:i>AES-CTR Monte Carlo Tests</h:i></h:b><h:p/>
					The evaluator shall test the encrypt functionality for each selected key size using
					100 2-tuples of pseudo-random values for plaintext and keys.<h:p/>
					The evaluator shall supply a single 2-tuple of pseudo-random values for each
					selected key size. This 2-tuple of plaintext and key is provided as input to the below
					algorithm to generate the remaining 99 2-tuples, and to run each 2-tuple through
					1000 iterations of AES-CTR encryption.<h:p/>
					<h:pre>
						# Input: PT, Key
						Key[0] = Key
						PT[0] = PT
						for i = 0 to 99 {
							Output Key[i], PT[0]
							for j = 0 to 999 {
								CT[j] = AES-CTR-Encrypt(Key[i], PT[j])
								PT[j+1] = CT[j]
							}
							Output CT[j]
							If (KeySize == 128) Key[i+1] = Key[i] xor CT[j]
							If (KeySize == 192) Key[i+1] = Key[i] xor (last 64 bits of CT[j-1] || CT[j])
							If (KeySize == 256) Key[i+1] = Key[i] xor ((CT[j-1] | CT[j])
							PT[0] = CT[j]
						}
					</h:pre><h:p/>
					The ciphertext computed in the 1000th iteration (CT[999]) is the result for each of
					the 100 2-tuples for each selected key size. This result shall be compared to the
					result of running 1000 iterations with the same values using a known good
					implementation.<h:p/>
					The evaluator shall test the decrypt functionality using the same test as above,
					exchanging CT and PT, and replacing AES-CTR-Encrypt with AES-CTR-Decrypt.
					198 Note additional design considerations for this mode are addressed in the KMD
					requirements.<h:p/>
					<h:b>XTS-AES:</h:b>
					These tests are intended to be equivalent to those described in the NIST document,
					“The XTS-AES Validation System (XTSVS),” updated 5 Sept 2013, found at
					<h:a href="http://csrc.nist.gov/groups/STM/cavp/documents/aes/XTSVS.pdf">
					http://csrc.nist.gov/groups/STM/cavp/documents/aes/XTSVS.pdf</h:a><h:p/>
					It is not recommended that evaluators use values obtained from static sources such
					as the XTS-AES test vectors at
					http://csrc.nist.gov/groups/STM/cavp/documents/aes/XTSTestVectors.zip or use
					values not generated expressly to exercise the XTS-AES implementation.<h:p/>
					The evaluator shall generate test values as follows:<h:p/>
					For each supported key size (256 bit (for AES-128) and 512 bit (for AES-256)
					keys), the evaluator shall provide up to five data lengths:<h:ul>
					<h:li>Two data lengths divisible by the 128-bit block size, If data unit lengths of
						complete block sizes are supported.</h:li>
					<h:li>Two data lengths not divisible by the 128-bit block size, if data unit lengths
						of partial block sizes are supported.</h:li>
					<h:li>The largest data length supported by the implementation, or 2^16 (65536),
						whichever is larger.</h:li></h:ul><h:p/>
					The evaluator shall specify whether the implementation supports tweak values of
					128-bit hexadecimal strings or a data unit sequence numbers, or both.<h:p/>
					For each combination of key size and data length, the evaluator shall provide 100
					sets of input data and obtain the ciphertext that results from XTS-AES encryption.
					If both kinds of tweak values are supported then each type of tweak value shall be
					used in half of every 100 sets of input data, for all combinations of key size and data 
					length. The evaluator shall verify that the resulting ciphertext matches the results
					from submitting the same inputs to a known-good implementation of XTS-AES.<h:p/>
					The evaluator shall test the decrypt functionality of XTS-AES using the same test
					as for encrypt, replacing plaintext values with ciphertext values and XTS-AES
					encrypt with XTS- AES decrypt.<h:p/>
					The evaluator shall check that the full length keys are created by methods that
					ensure that the two halves are different and independent.<h:p/>
					<h:b>AES-KWP:</h:b><h:p/>
					The tests below are derived from “The Key Wrap Validation System (KWVS),
					Updated: June 20, 2014” from the National Institute of Standards and Technology.<h:p/>
					The evaluator shall test the authenticated-encryption functionality of AES-KWP
					(KWP-AE) using the same test as for AES-KW authenticated-encryption with the
					following change in the five plaintext lengths:<h:ul>
					<h:li>Four lengths that are multiples of 8 bits</h:li>
					<h:li>The largest supported length less than or equal to 4096 bits.</h:li></h:ul><h:p/>
					The evaluator shall test the authenticated-decryption (KWP-AD) functionality of
					AES-KWP using the same test as for AES-KWP authenticated-encryption,
					replacing plaintext values with ciphertext values and AES-KWP authenticatedencryption with AES-KWP authenticated-decryption. For the Authenticated
					Decryption test, 20 out of the 100 trials per plaintext length have ciphertext values
					that fail authentication.<h:p/>
					Additionally, the evaluator shall perform the following negative tests:<h:p/>
					<h:b>Test 1: (invalid plaintext length):</h:b><h:p/>
					Determine the valid plaintext lengths of the implementation from the TOE
					specification. Verify that the implementation of KWP-AE in the TOE rejects
					plaintexts of invalid length by testing plaintext of the following lengths: 1) plaintext
					with length greater than 64 semi-blocks, 2) plaintext with bit-length not divisible
					by 8, and 3) plaintext with length 0.<h:p/>
					<h:b>Test 2: (invalid ciphertext length):</h:b>
					Determine the valid ciphertext lengths of the implementation from the TOE
					specification. Verify that the implementation of KWP-AD in the TOE rejects
					ciphertexts of invalid length by testing ciphertext of the following lengths: 1)
					ciphertext with length greater than 65 semi-blocks, 2) ciphertext with bit-length not
					divisible by 64, 3) ciphertext with length 0, and 4) ciphertext with length of one
					semi-block.<h:p/>
					<h:b>Test 3: (invalid ICV2):</h:b>
					Test that the implementation detects invalid ICV2 values by encrypting any
					plaintext value four times using a different value for ICV2 each time as follows:
					Start with a base ICV2 of 0xA65959A6. For each of the four tests change a different 
					byte of ICV2 to a different value, so that each of the four bytes is changed once.
					Verify that the implementation of KWP-AD in the TOE outputs FAIL for each test.<h:p/>
					<h:b>Test 4: (invalid padding length):</h:b>
					Generate one ciphertext using algorithm KWP-AE with substring [len(P)/8]32 of S
					replaced by each of the following 32-bit values, where len(P) is the length of P in
					bits and [ ]32 denotes the representation of an integer in 32 bits:<h:ul>
					<h:li>[0]32</h:li>
					<h:li>[len(P)/8-8]32</h:li>
					<h:li>[len(P)/8+8]32</h:li>
					<h:li>[513]32.</h:li></h:ul><h:p/>
					Verify that the implementation of KWP-AD in the TOE outputs FAIL on those
					inputs.<h:p/>
					<h:b>Test 5: (invalid padding bits):</h:b><h:p/>
					If the implementation supports plaintext of length not a multiple of 64-bits, then<h:p/>
					<h:pre>
					for each PAD length [1..7]
						for each byte in PAD set a zero PAD value;
							replace current byte by a non-zero value and use the resulting plaintext as
								input to algorithm KWP-AE to generate ciphertexts;
							verify that the implementation of KWP-AD in the TOE outputs FAIL on
								this input.
					</h:pre><h:p/>
					<h:b>AES-KW:</h:b><h:p/>
					The tests below are derived from “The Key Wrap Validation System (KWVS),
					Updated: June 20, 2014” from the National Institute of Standards and Technology.<h:p/>
					The evaluator shall test the authenticated-encryption functionality of AES-KW for
					each combination of the following input parameters:<h:ul>
					<h:li>Supported key lengths selected in the ST (e.g. 128 bits, 256 bits)</h:li>
					<h:li>Five plaintext lengths:<h:ul>
						<h:li>Two lengths that are non-zero multiples of 128 bits (two semi-block
							lengths)</h:li>
						<h:li>Two lengths that are odd multiples of the semi-block length (64 bits)</h:li>
						<h:li>The largest supported plaintext length less than or equal to 4096 bits.</h:li></h:ul>
					</h:li></h:ul><h:p/>
					For each set of the above parameters the evaluator shall generate a set of 100 key
					and plaintext pairs and obtain the ciphertext that results from AES-KW
					authenticated encryption. To determine correctness, the evaluator shall compare the 
					results with those obtained from the AES-KW authenticated-encryption function of
					a known good implementation.<h:p/>
					The evaluator shall test the authenticated-decryption functionality of AES-KW
					using the same test as for authenticated-encryption, replacing plaintext values with
					ciphertext values and AES-KW authenticated-encryption (KW-AE) with AES-KW
					authenticated-decryption (KW-AD). For the authenticated-decryption test, 20 out
					of the 100 trials per plaintext length must have ciphertext values that are not
					authentic; that is, they fail authentication.<h:p/>
					Additionally, the evaluator shall perform the following negative tests:<h:p/>
					<h:b>Test 1 (invalid plaintext length):</h:b><h:p/>
					Determine the valid plaintext lengths of the implementation from the TOE
					specification. Verify that the implementation of KW-AE in the TOE rejects
					plaintexts of invalid length by testing plaintext of the following lengths: 1) plaintext
					length greater than 64 semi-blocks, 2) plaintext bit-length not divisible by 64, 3)
					plaintext with length 0, and 4) plaintext with one semi-block.<h:p/>
					<h:b>Test 2 (invalid ciphertext length):</h:b><h:p/>
					Determine the valid ciphertext lengths of the implementation from the TOE
					specification. Verify that the implementation of KW-AD in the TOE rejects
					ciphertexts of invalid length by testing ciphertext of the following lengths: 1)
					ciphertext with length greater than 65 semi-blocks, 2) ciphertext with bit-length not
					divisible by 64, 3) ciphertext with length 0, 4) ciphertext with length of one semiblock, 
					and 5) ciphertext with length of two semi-blocks.<h:p/>
					<h:b>Test 3 (invalid ICV1):</h:b><h:p/>
					222 Test that the implementation detects invalid ICV1 values by encrypting any
					plaintext value eight times using a different value for ICV1 each time as follows:
					Start with a base ICV1 of 0xA6A6A6A6A6A6A6A6. For each of the eight tests
					change a different byte to a different value, so that each of the eight bytes is changed
					once. Verify that the implementation of KW-AD in the TOE outputs FAIL for each
					test.<h:p/>
					<h:b>CAM-CBC:</h:b><h:p/>
					To test the encrypt and decrypt functionality of Camellia in CBC mode, the
					evaluator shall perform the tests as specified in 10.2.1.2 of ISO/IEC 18367:2016.<h:p/>
					<h:b>CAM-CCM:</h:b><h:p/>
					To test the encrypt functionality of Camellia in CCM mode, the evaluator shall
					perform the tests as specified in 10.6.1.1 of ISO/IEC 18367:2016.<h:p/>
					To test the decrypt functionality of Camellia in CCM mode, the evaluator shall
					perform the tests as specified in 10.6.1.2 of ISO/IEC 18367:2016.<h:p/>
					As a prerequisite for these tests, the evaluator shall perform the test for encrypt
					functionality of Camellia in ECB mode as specified in 10.2.1.2 of ISO/IEC
					18367:2016.<h:p/>
					<h:b>CAM-GCM:</h:b><h:p/>
					To test the encrypt functionality of Camellia in GCM, the evaluator shall perform
					the tests as specified in 10.6.1.1 of ISO/IEC 18367:2016.<h:p/>
					To test the decrypt functionality of Camellia in GCM, the evaluator shall perform
					the tests as specified in 10.6.1.2 of ISO/IEC 18367:2016.<h:p/>
					As a prerequisite for these tests, the evaluator shall perform the test for encrypt
					functionality of Camellia in ECB mode as specified in 10.2.1.2 of ISO/IEC
					18367:2016.<h:p/>
					<h:b>XTS-CAM:</h:b><h:p/>
					These tests are intended to be equivalent to those described in the IPA document,
					ATR-01-B, “Specifications of Cryptographic Algorithm Implementation Testing —
					Symmetric-Key Cryptography“, found at
					<h:a href="https://www.ipa.go.jp/security/jcmvp/jcmvp_e/documents/atr/atr01b_en.pdf">
					https://www.ipa.go.jp/security/jcmvp/jcmvp_e/documents/atr/atr01b_en.pdf</h:a>.<h:p/>
					The evaluator shall generate test values as follows:<h:p/>
					For each supported key size (256 bit (for Camellia-128) and 512 bit (for Camellia256) keys),
					the evaluator shall provide up to five data lengths:<h:ul>
					<h:li>Two data lengths divisible by the 128-bit block size, If data unit lengths of
						complete block sizes are supported.</h:li>
					<h:li>Two data lengths not divisible by the 128-bit block size, if data unit lengths
						of partial block sizes are supported.</h:li>
					<h:li>The largest data length supported by the implementation, or 2^16 (65536),
						whichever is larger.</h:li></h:ul><h:p/>
					The evaluator shall specify whether the implementation supports tweak values of
					128-bit hexadecimal strings or a data unit sequence numbers, or both.<h:p/>
					For each combination of key size and data length, the evaluator shall provide 100
					sets of input data and obtain the ciphertext that results from XTS-Camellia
					encryption. If both kinds of tweak values are supported, 50 of each 100 sets of input
					data shall use each type of tweak value. The resulting ciphertext shall be compared
					to the results of a known-good implementation.<h:p/>
					As a prerequisite for this test, the evaluator shall perform the test for encrypt
					functionality of Camellia in ECB mode as specified in 10.2.1.2 of ISO/IEC
					18367:2016.<h:p/>
					The evaluator shall test the decrypt functionality of XTS-Camellia using the same
					test as for encrypt, replacing plaintext values with ciphertext values and XTSCamellia 
					encrypt with XTS- Camellia decrypt.<h:p/>
					As a prerequisite for this test, the evaluator shall perform the test for decrypt
					functionality of Camellia in ECB mode as specified in 10.2.1.2 of ISO/IEC
					18367:2016.<h:p/>	
				</Tests>
			</aactivity>
		</f-element>
	</f-component>

		
		<f-component cc-id="fcs_rbg_ext.1" name="Random Bit Generation">
			<f-element id="fcs-rbg-ext-1e1">
				<title>The TSF shall perform all deterministic random bit generation services in
					accordance with ISO/IEC 18031:2011 using 
					<selectables>
						<selectable>Hash_DRBG (any)</selectable>
						<selectable>HMAC_DRBG (any)</selectable>
						<selectable>CTR_DRBG (AES)</selectable>
					</selectables>.
				</title>
			</f-element>
			<f-element id="fcs-rbg-ext-1e2">
				<title>The deterministic RBG shall be seeded by at least one entropy source in
					accordance with NIST SP 800-90B that accumulates entropy from 
					<selectables>
						<selectable><assignable>number of software-based sources</assignable>
							software-based noise source</selectable>
						<selectable><assignable>number of hardware-based sources</assignable>
							hardware-based noise source</selectable>
					</selectables> with a minimum of 
					<selectables>
						<selectable>128</selectable>
						<selectable>192</selectable>
						<selectable>256</selectable>
					</selectables> bits of entropy at least equal to the greatest security strength, 
					according to ISO/IEC 18031:2011, of the keys and CSPs that it will generate.
				</title>
				<note role="application">
					ISO/IEC 18031:2011 contains three different methods of generating random numbers. Each of
					these in turn depends on underlying cryptographic primitives (hash functions/ciphers). This cPP
					allows SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512 for Hash_DRBG or HMAC_DRBG
					and only AES-based implementations for CTR_DRBG. 		
				</note>
				<aactivity>
				<TSS>
					The evaluator shall examine the TSS to determine that it specifies the DRBG type,
					identifies the entropy sources seeding the DRBG, and state the assumed or
					calculated min-entropy supplied either separately by each source or the min-entropy
					contained in the combined seed value.<h:p/>
					In addition to the materials below, documentation shall be produced—and the
					evaluator shall perform the activities—in accordance with Appendix D of
					[DSCcPP].<h:p/>
				</TSS>
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					The following tests require the developer to provide access to a test platform that
					provides the evaluator with tools that are typically not found on factory products.<h:p/>
					The evaluator shall perform 15 trials for the RNG implementation. If the RNG is
					configurable, the evaluator shall perform 15 trials for each configuration.<h:p/>
					If the RNG has prediction resistance enabled, each trial consists of (1) instantiate
					DRBG, (2) generate the first block of random bits (3) generate a second block of
					random bits (4) uninstantiate. The evaluator verifies that the second block of
					random bits is the expected value. The evaluator shall generate eight input values
					for each trial. The first is a count (0 – 14). The next three are entropy input, nonce,
					and personalization string for the instantiate operation. The next two are additional
					input and entropy input for the first call to generate. The final two are additional
					input and entropy input for the second call to generate. These values are randomly
					generated. “generate one block of random bits” means to generate random bits with
					number of returned bits equal to the Output Block Length (as defined in NIST
					SP800-90A).<h:p/>
					If the RNG does not have prediction resistance, each trial consists of (1) instantiate
					DRBG, (2) generate the first block of random bits (3) reseed, (4) generate a second
					block of random bits (5) uninstantiate. The evaluator verifies that the second block
					of random bits is the expected value. The evaluator shall generate eight input values
					for each trial. The first is a count (0 – 14). The next three are entropy input, nonce,
					and personalization string for the instantiate operation. The fifth value is additional
					input to the first call to generate. The sixth and seventh are additional input and
					entropy input to the call to reseed. The final value is additional input to the second
					generate call.<h:p/>
					The following paragraphs contain more information on some of the input values to
					be generated/selected by the evaluator. <h:ul>
					<h:li><h:b>Entropy input:</h:b> the length of the entropy input value must equal the seed length.</h:li>
					<h:li><h:b>Nonce:</h:b> If a nonce is supported (CTR_DRBG with no Derivation Function does
					not use a nonce), the nonce bit length is one-half the seed length.</h:li>
					<h:li><h:b>Personalization string:</h:b> The length of the personalization string must be &#8804;
					seed length. If the implementation only supports one personalization string
					length, then the same length can be used for both values. If more than one string
					length is support, the evaluator shall use personalization strings of two different
					lengths. If the implementation does not use a personalization string, no value
					needs to be supplied.</h:li>
					<h:li><h:b>Additional input:</h:b> the additional input bit lengths have the same defaults and
					restrictions as the personalization string lengths.</h:li></h:ul>
				</Tests>
				</aactivity>
			</f-element>
		</f-component>
	
	<f-component cc-id="fcs_slt_ext.1" name="Cryptographic Salt Generation">
		<f-element id="fcs-slt-ext-1e1">
			<title>The TSF shall use salts and nonces generated by an RBG as specified in
				FCS_RBG_EXT.1.
			</title>
			<aactivity>
			<TSS>
				The evaluator shall ensure the TSS describes how salts are generated using the
				RBG.
			</TSS>	
			<Guidance>
				There are no AGD evaluation activities for this component.
			</Guidance>
			<KMD>
				There are no KMD evaluation activities for this component.
			</KMD>

			<Tests>
				The evaluator shall confirm by testing that the salts obtained in the cryptographic
				operations that use the salts are of the length specified in FCS_SLT_EXT.1, are
				obtained from the RBG, and are fresh on each invocation.<h:p/>
				Note: in general these tests may be carried out as part of the tests of the relevant
				cryptographic operations.<h:p/>
			</Tests>
			</aactivity>
		</f-element>
	</f-component>
	
	<f-component cc-id="fcs_stg_ext.1" name="Protected Storage">
		<f-element id="fcs-stg-ext-1e1">
			<title>
				The TSF shall provide 
				<selectables>
					<selectable>mutable hardware-based</selectable>
					<selectable>immutable hardware-based</selectable>
					<selectable>software-based</selectable>
				</selectables> protected storage for asymmetric private keys and 
				<selectables>
					<selectable>symmetric keys</selectable>
					<selectable>persistent secrets</selectable>
					<selectable>no other keys</selectable>
				</selectables>.
			</title>
			<note role="application">
				If the protected storage is implemented in software that is protected as required by
				FCS_STG_EXT.2, the ST author is expected to select "software-based." If "software-based" is selected,
				the ST author is expected to select all "software-based key storage" in FCS_STG_EXT.2.<h:p/>
				Support for protected storage for all symmetric keys and persistent secrets will be required in
				future revisions.<h:p/>
			</note>
		</f-element>
		<f-element id="fcs-stg-ext-1e2">
			<title>
				FCS_STG_EXT.1.2 The TSF shall support the capability of 
				<selectables>
					<selectable>importing keys/secrets into the TOE</selectable>
					<selectable>causing the TOE to generate keys/secrets</selectable>
				</selectables> upon request of 
				<selectables>
					<selectable>a client application</selectable>
					<selectable>an administrator</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fcs-stg-ext-1e3">
			<title>
				The TSF shall be capable of destroying keys/secrets in the protected storage
				upon request of 
				<selectables>
					<selectable>a client application</selectable>
					<selectable>an administrator</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fcs-stg-ext-1e4">
			<title>
				The TSF shall have the capability to allow only the user that 
				<selectables>
					<selectable>imported the key/secret</selectable>
					<selectable>caused the key/secret to be generated</selectable>
				</selectables> to use the key/secret. Exceptions
				may be explicitly authorized only by 
				<selectables>
					<selectable>the client application</selectable>
					<selectable>the administrator</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fcs-stg-ext-1e5">
			<title>
				The TSF shall allow only the user that 
				<selectables>
					<selectable>imported the key/secret</selectable>
					<selectable>caused the key/secret to be generated</selectable>
				</selectables> to request that the key/secret be destroyed. Exceptions may
				only be explicitly authorized by 
				<selectables>
					<selectable>the client application</selectable>
					<selectable>the administrator</selectable>
				</selectables>.
			</title>
			<note role="application">
				Not all conformant TOEs will have the ability to import pre-generated keys into the TOE. In these
				cases, the TOE’s ability to receive commands to perform key generation is considered to be its
				implementation of the Parse service. A subject that caused a key to be generated is considered to
				be the ‘owner’ of that key in the same manner as they would be if they had imported it directly.
			</note>
			<aactivity>
			<TSS>
				The evaluator shall review the TSS to determine that the TOE implements the
				required protected storage. The evaluator shall ensure that the TSS contains a
				description of the protected storage mechanism that justifies the selection of
				mutable hardware-based or software-based.<h:p/>
			</TSS>
			<Guidance>
					The evaluator shall examine the operational guidance to ensure that it describes the
					process for generating keys, importing keys, or both, based on what is claimed by
					the ST. The evaluator shall also examine the operational guidance to ensure that it
					describes the process for destroying keys that have been imported or generated.<h:p/>
			</Guidance>
			<KMD>
				There are no KMD evaluation activities for this component.
			</KMD>
			<Tests>
				The evaluator shall test the functionality of each security function as described
				below. If the TOE supports both import and generation of keys, the evaluator shall
				repeat the testing as needed to demonstrate that the keys resulting from both
				operations are treated in the same manner. The devices used with the tooling may
				need to be non-production devices in order to enable the execution and gathering of
				evidence.<h:p/>
				<testlist>
					<test>
						The evaluator shall import or generate keys/secrets of each supported type
						according to the operational guidance. The evaluator shall write, or the developer
						shall provide access to, an application that generates a key/secret of each supported
						type and calls the import functions. The evaluator shall verify that no errors occur
						during import.
					</test>
					<test>The evaluator shall write, or the developer shall provide access to, an
						application that uses a generated or imported key/secret:<h:ul>
							<h:li>For RSA, the secret shall be used to sign data.</h:li>
							<h:li>For ECDSA, the secret shall be used to sign data.</h:li></h:ul>
						The evaluator shall repeat this test with the application-imported or applicationgenerated keys/secrets and a different application’s imported keys/secrets or
						generated keys/secrets. The evaluator shall verify that the TOE requires approval
						before allowing the application to use the key/secret imported or generated by the
						user or by a different application:<h:ul>
						<h:li>The evaluator shall deny the approvals to verify that the application is not able
							to use the key/secret as described.</h:li>
						<h:li>The evaluator shall repeat the test, allowing the approvals to verify that the
							application is able to use the key/secret as described.</h:li></h:ul>
						If the ST author has selected common application developer, this test is performed
						by either using applications from different developers or appropriately (according
						to API documentation) not authorizing sharing.<h:p/>
					</test>
					<test>The evaluator shall destroy keys/secrets of each supported type according
						to the operational guidance. The evaluator shall write, or the developer shall provide
						access to, an application that destroys an imported or generated key/secret. The
						evaluator shall repeat this test with the application-imported or applicationgenerated keys/secrets and a different application’s imported or generated
						keys/secrets. The evaluator shall verify that the TOE requires approval before
						allowing the application to destroy the key/secret imported by the administrator or
						by a different application:<h:ul>
						<h:li>The evaluator shall deny the approvals and verify that the application is still
							able to use the key/secret as described.</h:li>
						<h:li>The evaluator shall repeat the test, allowing the approvals and verifying that
							the application is no longer able to use the key/secret as described.</h:li></h:ul>
						If the ST author has selected common application developer, this test is performed
						by either using applications from different developers or appropriately (according
						to API documentation) not authorizing sharing.<h:p/>
					</test>
				</testlist>
			</Tests>
			</aactivity>
		</f-element>
	</f-component>

	<f-component cc-id="fcs_stg_ext.2" name="Key Storage Encryption">
		<f-element id="fcs-stg-ext-2e1">
			<title>
				The TSF shall encrypt [<h:i>AKs, SKs, KEKs, and 
				<selectables>
					<selectable>long-term trusted channel key material</selectable>
					<selectable>all software-based key storage</selectable>
					<selectable>no other keys</selectable>
				</selectables></h:i>] using one of the following
				methods: <assignable>key encryption methods as specified in FCS_COP.1/KeyEnc</assignable>.
			</title>
			<aactivity>
			<TSS>
				The evaluator shall review the TSS to determine that the TSS describes the
				protection of symmetric keys, KEKs, long-term trusted channel key material, and
				software-based key storage as claimed in FCS_STG_EXT.2.1. 
			</TSS>
			<Guidance>
				There are no AGD evaluation activities for this component.
			</Guidance>
			<KMD>
				There are no KMD evaluation activities for this component
			</KMD>
			<Tests>
				There are no test evaluation activities for this component.
			</Tests>			</aactivity>
		</f-element>
	</f-component>
	
	<f-component cc-id="fcs_stg_ext.3" name="Key Integrity Protection">
		<f-element id="fcs-stg-ext-3e1">
			<title>
				The TSF shall protect the integrity of any encrypted [<h:i>AKs, SKs, KEKs, and
				<selectables>
					<selectable>long-term trusted channel key material</selectable>
					<selectable>all software-based key storage</selectable>
					<selectable>no other keys</selectable>
				</selectables></h:i>] by using 
				<selectables linebreak="yes">
					<selectable>Symmetric encryption in 
						<selectables>
							<selectable>AES_CCM</selectable>
							<selectable>AES_GCM</selectable>
							<selectable>AES_KW</selectable>
							<selectable>AES_KWP</selectable>
							<selectable>CAM_CCM</selectable>
							<selectable>CAM_GCM</selectable>
						</selectables> mode in accordance with FCS_COP.1/SKC</selectable>
					<selectable>A hash of the stored key in accordance with FCS_COP.1/Hash</selectable>
					<selectable>A keyed hash of the stored key in accordance with FCS_COP.1/HMAC</selectable>
					<selectable>A digital signature of the stored key in accordance with FCS_COP.1/SigGen
						using an asymmetric key that is protected in accordance with FCS_STG_EXT.2</selectable>
					<selectable>An immediate application of the key for decrypting the protected data followed 
						by a successful verification of the decrypted data with previously known information</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fcs-stg-ext-3e2">
			<title>
				The TSF shall verify the integrity of the 
					<selectables>
						<selectable>hash</selectable>
						<selectable>digital signature</selectable>
						<selectable>MAC</selectable>
					</selectables> of the stored key prior to use of the key.
			</title>
			<note role="application">
				This requirement is not applicable to derived keys that are not stored. It is not expected that a
				single key will be protected from corruption by multiple of these methods; however, a product may
				use one integrity-protection method for one type of key and a different method for other types of
				keys.<h:p/>
				The documentation of the product’s encryption key management should be detailed enough that,
				after reading, the evaluator will thoroughly understand the product’s key management and how it
				meets the requirements to ensure the keys are adequately protected. This documentation should
				include an essay and diagrams. This documentation is not required to be part of the TSS – it can
				be submitted as a separate document and marked as developer proprietary.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS and ensure that it contains a description of
					how the TOE protects the integrity of its keys.
				</TSS>
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					There are no test evaluation activities for this component.
				</Tests>
			</aactivity>
		</f-element>
	</f-component>

	    </section>
	    
	<section title="User Data Protection" id="fdp">
		
	<f-component cc-id="fdp_acc.1" name="Subset Access Control">
		<f-element id="fdp-acc-1e1">
			<title>
				The TSF shall enforce the [<h:i>Access Control SFP</h:i>] on [
				<h:i><h:ul>
					<h:li>Subjects: S.DSC, S.Admin, S.CA, S.EPS</h:li>
					<h:li>Objects: OB.P_SDO, OB.T_SDO, OB.AuthData, OB.Pstate, OB.FAACntr,
						OB.AntiReplay, OB.Context</h:li>
					<h:li>Operations: OP.Import, OP.Create, OP.Use, OP.Modify, OP.Attest, OP.Store, OP.Export,
						OP.Destroy</h:li>
					</h:ul></h:i>
				].
			</title>
			<note role="application">
				The set of operations specified in the assignment can be collectively referred to as “access.” Any
				subsequent use of the term “access” should be interpreted to refer to one or more of these events.
			</note>
			<aactivity>
			<TSS>
				The evaluator shall confirm that the TSS contain the access control policy
				implemented by the TOE. I.e., the ST author lists each object and identifies for each
				object, which operations the TSF permits for each subject (i.e. what can “admins”
				do vs “users”).
			</TSS>
			<Guidance>
				There are no guidance evaluation activities for this component.
			</Guidance>
			<KMD>
				There are no KMD evaluation activities for this component.
			</KMD>
			<Tests>
				Testing for FDP_ACF includes testing this component.
			</Tests>
			</aactivity>
		</f-element>
	</f-component>
	
	<f-component cc-id="fdp_acf.1" name="Security Attribute Based Access Control">
		<f-element id="fdp-acf-1e1">
			<title>The TSF shall enforce the [<h:i>Access Control SFP</h:i>] to objects based on the
				following:
				[<h:i>subjects (defined in FDP_ACC.1.1) attempt to perform operations (defined in FDP_ACC.1.1)
				against objects (defined in FDP_ACC.1.1). Subject and object attributes may be used to determine
				whether the desired operations are permitted.<h:p/>
				The following are the SFP-relevant security attributes that are associated with the subjects and
				objects defined in FDP_ACC.1.1, as well as any restrictions on the attribute values:
				<h:ul>
					<h:li>S.DSC<h:ul>
						<h:li>DSC.ID</h:li></h:ul></h:li>
					<h:li>S.Admin – none</h:li>
					<h:li>S.CA<h:ul>
						<h:li>CA.ID</h:li></h:ul></h:li>
					<h:li>S.EPS<h:ul>
						<h:li>EPS.ID</h:li></h:ul></h:li>
					<h:li>OB.P_SDO<h:ul>
						<h:li>SDO.ID</h:li>
						<h:li>SDO.Type</h:li>
						<h:li>SDO.AuthData</h:li>
						<h:li>SDO.Reauth</h:li>
						<h:li>SDO.Conf</h:li>
						<h:li>SDO.Export</h:li>
						<h:li>SDO.Integrity</h:li>
						<h:li>SDO.Bind</h:li></h:ul></h:li>
					<h:li>OB.T_SDO – same as OB.P_SDO</h:li>
					<h:li>OB.AuthData – none</h:li>
					<h:li>OB.Pstate – none</h:li>
					<h:li>OB.FAACntr – none</h:li>
					<h:li>OB.AntiReplay – none</h:li>
					<h:li>OB.Context– none</h:li>
				</h:ul></h:i>].
			</title>
		</f-element>
		<f-element id="fdp-acf-1e2">
			<title>
				The TSF shall enforce the following rules to determine if an operation among
				controlled subjects and controlled objects is allowed: [<h:i>
				<h:ul>
					<h:li>Any subject that has been authorized to perform any operation against any OB.P_SDO or
						OB.T_SDO object can continue to perform this operation if one of the following conditions
						is true:<h:ul>
						<h:li>The object’s SDO.Reauth attribute has a value of ‘none’, indicating that
							reauthorization is not required for subsequent interactions with the SDO</h:li>
						<h:li>The object’s SDO.Reauth attribute has a value of ‘each use’, indicating that reauthorization is required for each interaction with the SDO, and the subject has
							supplied valid authorization data to the TOE</h:li></h:ul></h:li>
					<h:li>[assignment: rules automatically enforced by the TSF that always prohibit certain subjectobject-operation actions]</h:li>
					<h:li>[assignment: rules automatically enforced by the TSF that always permit certain subjectobject-operation actions]</h:li>
					<h:li>[assignment: rules automatically enforced by the TSF that conditionally permit certain
						subject-object-operation actions based on subject security attributes, object security
						attributes, or other conditions]</h:li>
					<h:li>[selection: [assignment: any configurable rules or parameters that can be modified to
						affect the behavior of the Access Control SFP], no configurable rules]</h:li>
				</h:ul></h:i>].
			</title>
		</f-element>
		<f-element id="fdp-acf-1e3">
			<title>
				The TSF shall explicitly authorize access of subjects to objects based on the
				following additional rules: <assignable>rules, based on security attributes, that explicitly
				authorize access of subjects to objects</assignable>.
			</title>
			<note role="application">
				The expectation of this SFR is that the reader is given sufficient information to determine, for each
				object controlled by the TOE, the operations that can be performed on it based on the subject
				attempting to perform the operation, and whether this is conditional based on attribute values or
				any other circumstances.<h:p/>
				It is expected that many of the subject-object-operation combinations will always be prohibited by
				the TSF, either because the target object is not externally modifiable or because the subject lacks
				the ability to perform the operation in question.<h:p/>
				The ST author is not expected to create an exhaustive list of subject-object-operation
				combinations; it is sufficient to list those that are always permitted and those that are conditionally
				permitted with the expectation that all remaining combinations are prohibited.<h:p/>
				FDP_ACF.1.3 and FDP_ACF.1.4 allow the ST author to optionally specify override conditions to
				resolve otherwise contradictory Access Control SFP rules. For example, the rule “S.Admin may
				always modify the SDO.Conf attribute of any OB.P_SDO or OB.T_SDO object” may be
				overridden by a statement in FDP_ACF.1.4 that identifies any particular SDO objects as nonmodifiable 
				regardless of subject authorizations.<h:p/>
				The DSC may contain pre-installed SDOs. The DSC will enforce access control for pre-installed
				SDOs like any other SDO it contains or manages.<h:p/>
			</note>
			<aactivity>
		<TSS>
			The evaluator shall examine the TSS to verify that it describes the policy rules for
			the Access Control SFP. Specifically, the evaluator should be able to identify, for
			any arbitrary subject-object-operation pairing, which of the following is true:<h:ol type="a">
			<h:li>The subject can always perform the desired operation.</h:li>
			<h:li>The subject can never perform the desired operation, either because they
				lack sufficient permission or because the TSF includes no interface to
				support the operation.</h:li>
			<h:li>The subject can only perform the desired operation under certain
				conditions (which the evaluator shall verify are described in the TSS). For
				example, “the S.CA subject may only perform the OP.Destroy operation
				on an OB.SDO object if it was the subject that originally created or
				imported the SDO.”</h:li>
			<h:li>The subject can only perform the desired operation on one or more
				attributes of the object as opposed to the entire object itself (which the
				evaluator shall verify are identified in the TSS).</h:li>
			<h:li>Whether the subject can perform the desired operation depends on TSF
				configuration (which the evaluator shall verify is described in the TSS as
				part of the evaluation of FMT_SMF.1).</h:li>
			<h:li>Some combination of c, d, and e.</h:li></h:ol>
				Given that this SFR requires a large number of potential subject-object-operation
				pairings to be identified, it is not the expectation that the TSS contain an exhaustive
				list of these pairings. It is possible that large numbers of pairings are addressed by
				blanket statements of policy rules, such as “the subjects S.DSC and S.CA are never
				able to perform any operation on the OB.AntiReplay object.” For any rules that are
				not addressed in this manner, the evaluator shall verify the TSS includes sufficient
				data for the evaluator to determine how the TSF will evaluate the action. This can
				be presented in the form of a table, flowchart, list, or other manner that the ST author
				finds suitable.<h:p/>
			Note that the DSC developer may not use the same terminology for its subjects,
			objects, and operations as the PP. If this is the case, the evaluator shall verify that
			the TSS includes a mapping that unambiguously shows how the vendor’s preferred
			terminology corresponds to what the PP defines.<h:p/>
		</TSS>
		<Guidance>
			For any access control policy enforcement behavior that is configurable, the
			evaluator shall ensure that the operational guidance describes how to perform the
			configuration, including any restrictions on permissible configurable settings.
		</Guidance>
		<KMD>
			There are no KMD evaluation activities for this component.
		</KMD>
		<Tests>
			The following testing may require the TOE developer to make a test harness
			available to the evaluator that allows the evaluator to interface directly with the
			DSC. Due to the large volume of potential testing that this requires, this test may
			require the use of an automated script. If a test script is made available, the evaluator
			shall verify that it includes sufficient detail to validate the claims made in the TSS.<h:p/>
			For each subject/object/operation/attribute combination, the evaluator shall attempt
			to perform the operation or determine that no interface is present to attempt the
			operation, consistent with the limitations described in the TSS.<h:p/>
			For each case where an operation is always permitted or never permitted, both
			positive and negative testing will be conducted implicitly by attempting the
			operation with all possible subjects and determining that the intended results occur
			in each case.<h:p/>
			For each case where the operation succeeds or fails based on the target object
			attribute, the evaluator shall ensure that both positive and negative testing is
			performed such that only the correct target attributes can be operated upon.<h:p/>
			For each case where the operation succeeds or fails based on one or more specific
			conditions, the evaluator shall ensure that both positive and negative testing is
			performed such that the presence of the conditions causes the test to succeed while
			the absence of the conditions causes the test to fail.<h:p/>
			For each case where the operation succeeds or fails based on an administratively
			configured setting, the evaluator shall ensure that both positive and negative testing
			is performed such that the configuration setting can be shown to affect whether or
			not the operation succeeds.<h:p/>
		</Tests>			
		</aactivity>
		</f-element>
	</f-component>

						
	<f-component cc-id="fdp_etc_ext.2" name="Propagation of SDOs">
		<f-element id="fdp-etc-ext-1e2">
			<title>
				The TSF shall propagate only SDO references, wrapped authorization data,
				and wrapped SDOs such that only 
				<selectables>
					<selectable>the TSF</selectable>
					<selectable>authorized users</selectable>
				</selectables> can access them.
			</title>
			<note role="application">
				The “SDO reference” is a pointer to an object that resides in the TOE; this can be thought of as
				a token to the object. The “only the TSF can unwrap the data” selection refers to data that is
				stored outside the TOE boundary (i.e., data that has been propagated).
			</note>
			<aactivity>
			<TSS>
				The evaluator shall examine the TSS to ensure that it describes how it protects the
				SDO references, authorization data, against access from unauthorized entities. If the
				TSF is selected, then it should describe how it provides confidentiality of the data
				while it resides outside the TOE.
			</TSS>
			<Guidance>
				There are no guidance evaluation activities for this component.
			</Guidance>
			<KMD>
				There are no KMD evaluation activities for this component.
			</KMD>
			<Tests>
				There are no test evaluation activities for this component.
			</Tests>			
			</aactivity>
		</f-element>
	</f-component>
		
	<f-component cc-id="fdp_frs_ext.1" name="Factory Reset">
		<f-element id="fdp-frs-ext-1e1">
			<title>
				The TSF shall permit a factory reset of the TOE upon: 
				<selectables>
					<selectable>activation by external interface</selectable>
					<selectable>presentation of <assignable>types of authorization data 
						required and reference to their specification</assignable></selectable>
					<selectable>no actions or conditions</selectable>
				</selectables>.
			</title>
			<note role="application">
				If the DSC provides factory reset and requires an authorization to carry out the operation then the
				ST author selects either <h:u>presentation of…</h:u> and fills in the authorization data accepted (e.g. a PIN
				or a cryptographic token based on some specification referenced in the assigned value). If the DSC
				provides factory reset external to the DSC without requiring authorization then the ST author
				selects <h:u>activation by external interface</h:u>. This selection is intended for use when the device
				containing the DSC takes responsibility for obtaining and checking the authorization for factory
				reset.<h:p/>
				If any selection other than <h:u>no actions or conditions</h:u> is made in FDP_FRS_EXT.1.1, 
				the selectionbased SFR FDP_FRS_EXT.2 must be claimed.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to determine that it describes each of the
					conditions which will lead to a factory reset.
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to ensure that it describes the
					ways the administrator can set the conditions to initiate a factory reset.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					The evaluator shall identify all functions that resets the DSC to factory setting. For
					each function, the evaluator shall identify all methods for authorizing the factory
					reset. For each function and for each authorization method, the evaluator shall
					create an SDE or SDO. The evaluator shall then verify the presence of the item just
					created. The evaluator shall initiate a factory reset using the selected function and
					authorization method and verify the item no longer exists.
				</Tests>			
			</aactivity>
		</f-element>
	</f-component>
			
	<f-component cc-id="fdp_itc_ext.1" name="Parsing of SDEs">
		<f-element id="fdp-itc-ext-1e1">
			<title>
				The TSF shall support importing SDEs using 
				<selectables>
					<selectable>physically protected channels as specified in FTP_ITP_EXT.1</selectable>
					<selectable>encrypted data buffers as specified in FTP_ITE_EXT.1</selectable>
					<selectable>cryptographically protected data channels as specified in FTP_ITC_EXT.1</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fdp-itc-ext-1e2">
			<title>
				The TSF shall verify the integrity of the SDE using 
				<selectables>
					<selectable>cryptographic hash as specified in FCS_COP.1/Hash</selectable>
					<selectable>keyed hash as specified in FCS_COP.1/HMAC</selectable>
					<selectable>integrityproviding encryption algorithm as specified in FCS_COP.1/KeyEnc
						<selectables>
							<selectable>SE1</selectable>
							<selectable>SE2</selectable>
						</selectables></selectable>
					<selectable>digital signature as specified in FCS_COP.1/SigVer</selectable>
					<selectable>integrity verification supported by FDP_ITC_EXT.1.1</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fdp-itc-ext-1e3">
			<title>
				The TSF shall ignore any security attributes associated with the user data
				when imported from outside the TOE.
			</title>
		</f-element>
		<f-element id="fdp-itc-ext-1e4">
			<title>
				The TSF shall bind SDEs to security attributes using <assignable>list of ways
				the TSF generates security attributes and binds them to the SDEs</assignable>.
			</title>
			<note role="application">
				The way the TSF checks the integrity of the SDE depends on the method of importation. For
				example, the encrypted data channel may provide data integrity as part of its service.<h:p/>
				When a TSF parses an SDE, it should generate security attributes and create an SDO by binding
				the security attributes to the SDE.<h:p/>
				If <h:u>physically protected channels as specified in FTP_ITC_EXT.1</h:u> is selected, the selection-based
				SFR FTP_ITP_EXT.1 must be claimed.<h:p/>
				If <h:u>encrypted data buffers as specified in FTP_ITE_EXT.1</h:u> is selected, the selection-based SFR
				FTP_ITE_EXT.1 must be claimed.<h:p/>
				If <h:u>cryptographically protected data channels as specified in FTP_ITC_EXT.1</h:u> is selected, the
				selection-based SFR FTP_ITC_EXT.1 must be claimed.
			</note>
		<aactivity>
			<TSS>
				The evaluator shall confirm the TSS contains descriptions of the supported methods
				the TSF uses to import SDEs into the TOE. For each import method selected, the
				TSS shall describe integrity verification schemes employed. The TSS shall also list
				the ways the TSF generates and binds security attributes to the SDEs.
			</TSS>
			<Guidance>
				There are no AGD evaluation activities for this component.
			</Guidance>
			<KMD>
				There are no KMD evaluation activities for this component.
			</KMD>
			<Tests>
				For each supported import method selected in FDP_ITC_EXT.1.1 and for each
				supported integrity verification method selected in FDP_ITC_EXT.1.2. used by the
				selected import method, provide one SDE with valid integrity credentials, one with
				invalid integrity credentials (e.g. hash). The operations with invalid integrity
				credentials must result in error. The operations with valid integrity credentials must
				return an SDO with valid security attributes in accordance with FDP_ITC_EXT.1.4.
			</Tests>
		</aactivity>
		</f-element>
	</f-component>	

	<f-component cc-id="fdp_itc_ext.2" name="Parsing of SDOs">
		<f-element id="fdp-itc-ext-2e1">
			<title>
				The TSF shall support importing SDOs using 
				<selectables>
					<selectable>physically protected channels as specified in FTP_ITP_EXT.1</selectable>
					<selectable>encrypted data buffers as specified in FTP_ITE_EXT.1</selectable>
					<selectable>cryptographically protected data channels as specified in FTP_ITC_EXT.1</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fdp-itc-ext-2e2">
			<title>
				The TSF shall verify the integrity of the SDO using 
				<selectables>
					<selectable>
						cryptographic hash as specified in FCS_COP.1/Hash</selectable>
					<selectable>keyed hash as specified in FCS_COP.1/HMAC</selectable>
					<selectable>integrityproviding encryption algorithm as specified in FCS_COP.1/KeyEnc
						<selectables>
							<selectable>SE1</selectable>
							<selectable>SE2</selectable>
						</selectables></selectable>
					<selectable>digital signature as specified in FCS_COP.1/SigVer</selectable>
					<selectable>integrity verification supported by FDP_ITC_EXT.2.1</selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fdp-itc-ext-2e3">
			<title>
			       The TSF shall use the security attributes associated with the imported user
				data.
			</title>
		</f-element>
		<f-element id="fdp-itc-ext-2e4">
			<title>
				The TSF shall ensure that the protocol used provides for the unambiguous
				association between the security attributes and the user data received.
			</title>
		</f-element>
		<f-element id="fdp-itc-ext-2e5">
			<title>
				The TSF shall ensure that interpretation of the security attributes of the imported
				user data is as intended by the source of the user data.
			</title>
			<note role="application">
				The way the TSF checks the integrity of the SDO depends on the method of importation. For
				example, the encrypted data channel may provide data integrity as part of its service.<h:p/>
				When a TSF parses an SDO, it should already have a set of security attributes. However, the TSF
				may modify these attributes, if authorized, to comply with security policies on the TOE.<h:p/>
				If <h:u>physically protected channels as specified in FTP_ITC_EXT.1</h:u> is selected, the selection-based
				SFR FTP_ITP_EXT.1 must be claimed.<h:p/>
				If <h:u>encrypted data buffers as specified in FTP_ITE_EXT.1</h:u> is selected, the selection-based SFR
				FTP_ITE_EXT.1 must be claimed.<h:p/>
				If <h:u>cryptographically protected data channels as specified in FTP_ITC_EXT.1</h:u> is selected, the
				selection-based SFR FTP_ITC_EXT.1 must be claimed.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall confirm the TSS contains descriptions of the supported methods
					the TSF uses to import SDOs into the TOE. For each import method selected, the
					TSS shall describe integrity verification schemes employed. The TSS shall also list
					the ways the TSF generates and binds security attributes to the SDOs.
				</TSS>
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					For each supported import method selected in FDP_ITC_EXT.2.1 and for each
					supported integrity verification method selected in FDP_ITC_EXT.2.2 used by the
					selected import method, provide one SDO with valid integrity credentials, one with
					invalid integrity credentials (e.g. hash). The operations with invalid integrity
					credentials must result in error. The operations with valid integrity credentials must
					return an SDO with valid security attributes in accordance with FDP_ITC_EXT.2.3,
					FDP_ITC_EXT.2.4, and FDP_ITC_EXT.2.5.
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
		
	<f-component cc-id="fdp_mfw_ext.1" name="Mutable/Immutable Firmware">
		<f-element id="fdp-mfw-ext-1e1">
			<title>
				The TSF shall be maintained as 
				<selectables>
					<selectable>immutable</selectable>
					<selectable>mutable</selectable>
				</selectables> firmware.
			</title>
			<note role="application">
				The ST author must include FDP_MFW_EXT.2, FDP_MFW_EXT.3, FPT_FLS.1/FW, and
				FPT_RPL.1/Rollback if <h:u>mutable</h:u> is selected.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS and ensure that details of which firmware
					components are considered mutable and which firmware components are
					considered immutable, as well as how these firmware components can/cannot be
					modified or altered, are described. For example, DSC firmware components that
					are stored in ROM would be considered immutable.
				</TSS>
				<Guidance>
					If the TOE has mutable firmware, the evaluator shall examine the operational
					guidance to ensure that it describes how to modify the firmware.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					If the TOE has mutable firmware, the evaluator shall perform the activities
					described in the operational guidance to modify the firmware.
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
		
	<f-component cc-id="fdp_rip.1" name="Subset Residual Information Protection">
		<f-element id="fdp-rip-1e1">
			<title>
				The TSF shall ensure that any previous information content of a resource is made
				unavailable upon the [<h:i>deallocation of the resource from</h:i>] 
				the following objects: [<h:i>
				<h:ul>
					<h:li>SDOs</h:li>
					<h:li>SDEs</h:li>
				</h:ul></h:i>].
			</title>
			<note role="application">
				When an SDE is a key then it is also subject to the key destruction requirements in FCS_CKM.4,
				depending on where and how it is stored. This SFR applies to authorization data that are SDEs
				and security attributes in SDOs.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall check to ensure that the TSS describes resource deallocation to
					the extent that they can determine that no data will be reused when reallocating
					resources following the destruction of an SDE or SDO. The evaluator shall ensure
					that this description at a minimum describes how the previous data is destroyed.
					The evaluator shall also ensure that this destruction method is consistent with
					FCS_CKM.4.
				</TSS>
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					Testing for FCS_CKM.4 is sufficient to address this component.
				</Tests>
			</aactivity>
		</f-element>
	</f-component>

	<f-component cc-id="fdp_sdc_ext.1" name="Confidentiality of SDEs">
		<f-element id="fdp-sdc-ext-1e1">
			<title>
				The TSF shall use 
				<selectables>
					<selectable>protected storage</selectable>
					<selectable>symmetric encryption using
						<selectables>
							<selectable>AES-CCM</selectable>
							<selectable>AES-GCM</selectable>
							<selectable>AES-CBC</selectable>
							<selectable>AES-KWP</selectable>
							<selectable>AES-KW</selectable>
							<selectable>CAM-CBC</selectable>
							<selectable>CAM-CCM</selectable>
							<selectable>CAM-GCM</selectable>
						</selectables> as specified in FCS_COP.1/SKC</selectable>
					<selectable>key wrapping using 
						<selectables>
							<selectable>KAS1</selectable>
							<selectable>KAS2</selectable>
							<selectable>KTS-OAEP</selectable>
						</selectables> as specified in FCS_COP.1/KAT</selectable>
				</selectables> to protect the confidentiality of authorization data
				and <assignable>list of internally and externally stored SDEs identified 
				in the Confidential SDE List attribute of an SDO</assignable>.
			</title>
		</f-element>
		<f-element id="fdp-sdc-ext-1e2">
			<title>
				The TSF shall use FCS_CKM.1/KEK to derive or generate the key to
				encrypt the SDEs.
			</title>
			<note role="application">
				This SFR applies to confidential SDEs, especially secret and private keys, Allowed Random
				Number Generators’ state data, and vendor verification reference data. This SFR also applies to
				all authorization data appearing in the attribute list under SDO.AuthData as well as any
				administrator authorization data which may be stored implicitly.<h:p/>
				If the TOE stores these parameters outside of its boundary, it must encrypt them according to the
				cryptographic requirements for key encryption, as required by FDP_ETC_EXT.2.<h:p/>
				Vendor pre-installed SDOs includes both objects installed during manufacturing, and those
				provisioned by the vendor before final release to customer. The administrator and no one else
				owns and controls these objects.<h:p/>
				The confidential-SDE List attribute of the SDO indicates those SDEs that require confidentiality.
				If SDEs do not require confidentiality, then its omission from this list indicates that confidentiality
				is not required.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall examine the TSS to determine that it describes the protection
					for SDEs and authorization data and the methods of protection (e.g. protected
					storage, symmetric encryption, key wrapping, etc.).<h:p/>
					The evaluator shall also examine the TSS to determine whether the TSF stores this
					data inside the TOE boundary or in its operational environment. If the TSF stores
					this data inside the TOE boundary, the evaluator shall ensure that TSF uses one of
					the listed methods to provide confidentiality. If the data is stored in the TOE’s
					operational environment, the evaluator shall ensure that the TSF uses key wrapping
					to provide confidentiality.<h:p/>
					The evaluator shall examine the TSS to confirm is sufficiently describes each
					method used to provide confidentiality for SDEs. The evaluator shall also confirm
					that the TOE supports all encryption methods selected.
				</TSS>
				<Guidance>
					There are no AGD evaluation activities for this component.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>	
				<Tests>
					If the TOE stores SDEs and authorization data inside the TSF, the evaluator shall
					ensure that external interfaces cannot extract this data in plaintext.<h:p/>
					In this case, use the evaluation activities of the FPT_PHP.3 if protected storage is
					selected, FCS_COP.1/SK if symmetric encryption using… is selected, and
					FCS_COP.1/KAT if key wrapping using… is selected.<h:p/>
					If the TOE stores authentication data inside the operational environment, the
					evaluator shall ensure that plaintext data is not visible on the interface between the
					TOE and the operational environment.
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
		
	<f-component cc-id="fdp_sdi.2" name="Stored Data Integrity Monitoring and Action">
		<f-element id="fdp-sdi-2e1">
			<title>
				The TSF shall monitor SDOs and SDEs controlled by the TSF for [<h:i>integrity errors</h:i>]
				on all objects, based on the following attributes: 
				<selectables>
					<selectable><assignable>attribute associated with presence in protected storage</assignable></selectable>
					<selectable>cryptographic hash</selectable>
					<selectable>digital signature</selectable>
					<selectable>integrity-providing encryption algorithm as specified 
						in FCS_COP.1/KeyEnc 
						<selectables>
							<selectable>SE1</selectable>
							<selectable>SE2</selectable>
						</selectables></selectable>
				</selectables>.
			</title>
		</f-element>
		<f-element id="fdp-sdi-2e2">
			<title>
				Upon detection of a data integrity error, the TSF shall [<h:i><h:ul>
				<h:li>prohibit the use of the altered data</h:li>
				<h:li>send notification of the error where applicable</h:li>
				</h:ul></h:i>].
			</title>
			<note role="application">
				This SFR deals with the mechanism that protects the integrity of the SDEs and security attributes
				within an SDO. This provides the binding data that ensuresthe prevention of unauthorized changes
				to the SDEs and attributes.<h:p/>
				The cryptographic requirements for cryptographic hashes and digital signatures apply here.<h:p/>
				No specific requirement is placed here on the nature of the integrity protection data, but the
				Security Target shall describe this protection measure, and shall identify the iteration of
				FCS_COP.1/Hash or FCS_COP.1/HMAC that covers any cryptographic algorithm used.<h:p/>
				The integrity protection data in FDP_SDI.2.1 is included in the list of attributes identified in
				FMT_MSA.1, and protects the value of the SDEs and of the SDO security attributes.<h:p/>
				When an SDO is parsed, its integrity is checked when it is imported into the TOE.
			</note>
			<aactivity>
				<TSS>
					The evaluator shall confirm that the ST author describes the methods for protecting
					the integrity of SDOs stored with the TOE, and shall identify the iteration of
					FCS_COP.1/Hash or FCS_COP.1/HMAC that covers any cryptographic algorithm
					used. The evaluator shall also confirm that the TSS describes the response upon the
					detection of an integrity error.<h:p/>
					The evaluator shall confirm that the TSS describes the actions the TSF takes when
					the integrity verification fails for an SDO, including the circumstances that cause a
					notification to be sent when this occurs.<h:p/>
					The evaluator shall confirm that TSS describes how integrity of SDOs is protected
					in FMT_MSA.3 during initialization, and how the integrity of SDOs are verified
					during parsing (import) in FDP_ITC_EXT.
				</TSS>
				<Guidance>
					The evaluator shall examine the operational guidance to verify that it describes the
					conditions that cause a notification to be sent when an integrity error is detected,
					and what the contents of the notification are.
				</Guidance>
				<KMD>
					There are no KMD evaluation activities for this component.
				</KMD>
				<Tests>
					The tests for FDP_ITC_EXT and FMT_MSA.3 shall suffice for this component.
				</Tests>
			</aactivity>
		</f-element>
	</f-component>
       </section>
	   
	   <section title="Identification and Authentication" id="fia">
	   
			When a platform process requests the ability to create, use, modify, dispose of, etc., an SDE or
			SDO within the DSC, as a matter of policy, the DSC may expect or request authorization from the
			platform process, which may include authentication of the requester on whose behalf the platform
			process is acting. The DSC assumes the requester to be either a person, a process, or a device. The
			rules on how the requester formats the request will be outside the scope of this cPP. Upon request
			(or as a matter of an established protocol), the interface (on behalf of the user) presents to the DSC
			process those authorization values required to authorize execution of the event request. This may
			include one or more different types of authentication credentials. The DSC validates these items
			before acting upon the requested event. The validation may simply compare the authorization
			values to an expected value, or perform a more complex cryptographic protocol to verify the
			authenticity of the user. After validation, the DSC may then create and subsequently use an
			authorization value to represent the validation of these authorization values in anticipation of future
			requests.<h:p/>
			Requirements related to the strength, quality, and performance of authorization values supplied to
			the DSC, such as X.509 certificates and biometric templates, are all outside the scope of the DSC
			and are expected to be met by the platform, where applicable. The DSC is only expected to enforce
			quality metrics on any authorization values it generates itself.<h:p/>
	   
	   
		<f-component cc-id="fia_afl_ext.1" name="Authorization Failure Handling">
			<f-element id="fia-afl-ext-1e1">
				<title>
					The TSF shall maintain 
					<selectables>
						<selectable>a unique counter for 
							<selectables>
								<selectable>each SDO</selectable>
								<selectable>the following SDOs <assignable>list of SDOs</assignable></selectable>
							</selectables></selectable>
						<selectable>one global counter covering
							<selectables>
								<selectable>all SDOs</selectable>
								<selectable>the following SDOs <assignable>list of SDOs</assignable></selectable>
							</selectables></selectable>
					</selectables>, called the failed authorization attempt counters, that counts of the number
					of unsuccessful authorization attempts that occur related to authorizing access to these <h:b>SDOs</h:b>.
				</title>
			</f-element>
			<f-element id="fia-afl-ext-1e2">
				<title>
					The TSF shall maintain a 
					<selectables>
						<selectable>static</selectable>
						<selectable>administrator configurable variable</selectable>
					</selectables> threshold of the minimal acceptable number of unsuccessful authorization
					attempts that occur related to authorizing access to these <h:b>SDOs</h:b>.
				</title>
			</f-element>
			<f-element id="fia-afl-ext-1e3">
				<title>
					When the failed authorization attempt counters 
					<selectables>
						<selectable>meets</selectable>
						<selectable>surpasses</selectable>
					</selectables> the threshold for unsuccessful authorization attempts, the TSF shall 
					<selectables linebreak="yes">
						<selectable>prevent future authorization attempts for a static prescribed amount of time</selectable>
						<selectable>prevent future authorization attempts for an administrator configurable amount of time</selectable>
						<selectable>collaborative Protection Profile for Dedicated Security Components</selectable>
						<selectable>prevent all future authorization attempts indefinitely (i.e., lock), as described by
							FIA_AFL_EXT.2</selectable>
						<selectable>factory reset the TOE wiping out all non-persistent SDOs, as described by
							FDP_FRS_EXT.2</selectable>
					</selectables> for these <h:b>SDOs</h:b>.
				</title>
			</f-element>
			<f-element id="fia-afl-ext-1e4">
				<title>
					The TSF shall increment the failed authorization attempt counter before it
					verifies the authorization.
				</title>
				<note role="application">
					The product validates the authorization factors prior to determining whether user (administrator
					or client application) access to the SDE/SDO is permitted. In cases where validation of the
					authorization factors fails, the product will not allow access to SDE/SDO. The product validates
					the authorization factors in such a way that it does not allow an attacker to circumvent the other
					requirements to gain knowledge about the SDE/SDO or other keying material that protects them
					from inadvertent exposure.<h:p/>
					It is possible for the TOE to have different rules for the treatment of different SDOs or groups of
					SDOs. For example, some SDOs may trigger a factory reset in the event of excessive authorization
					failures while others may only temporarily block future authorization attempts. The ST author
					should iterate this SFR for each distinct response the TSF can make (as defined by the selections
					in FIA_AFL_EXT.1.3) and the SDOs whose authorization failures will trigger these responses.<h:p/>
					If <h:u>prevent all future authorization attempts indefinitely (i.e., lock), as described by
					FIA_AFL_EXT.2</h:u> is selected in FIA_AFL_EXT.1.3, the selection-based SFR FIA_AFL_EXT.2 must
					be claimed.<h:p/>
					If <h:u>factory reset the TOE wiping out all non-persistent SDOs, as described by FDP_FRS_EXT.2</h:u> is
					selected in FIA_AFL_EXT.1.3, the selection-based SFR FDP_FRS_EXT.2 must be claimed.	<h:p/>			
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>
		
		<f-component cc-id="fia_sos.2" name="TSF Generation of Secrets">
			<f-element id="fia-sos-2e1">
				<title>
					The TSF shall provide a mechanism to generate authorization data that meet [<h:i>the
					following quality metrics:<h:ul>
						<h:li>For each authentication attempt, the probability shall be less than one 
							in 1,000,000 that a random attempt will be successful</h:li>
						<h:li>For multiple attempts to authenticate during a one-minute period, the probability 
						shall be less than one in 100,000 that a series of random attempts will be successful</h:li>
						</h:ul></h:i>.
				</title>
			</f-element>
			<f-element id="fia-sos-2e2">
				<title>
					The TSF shall be able to enforce the use of TSF generated authorization data for
					<assignable>non-empty list of TSF functions</assignable>.
				</title>
				<note role="application">
					This SFR expects the TSF must generate authorization data from a sufficiently large key space to
					ensure that users cannot employ random guessing as a statistically plausible method of authorizing
					actions within the TOE, both for a single event and over a session. 
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>
		
		<f-component cc-id="fia_uau.2" name="User Authentication before Any Action">
			<f-element id="fia-uau-2e1">
				<title>
					The TSF shall require each user <h:b>and SDO owner</h:b> to be successfully authenticated
					before <h:b>authorizing</h:b> any <h:s>other</h:s> TSF-mediated actions on behalf of that 
					user <h:b>or SDO owner</h:b>.
				</title>
				<note role="application">
					This SFR goes with FDP_ACF.1, which authorizes access to SDOs (i.e. authorizes operations with
					or on SDOs). The security policies in FDP_ACF.1 may require authentication of the subjects and
					owners of the SDOs before the TSF authorizes access to them. An authentication token is critical
					data bound to a user. Such data, when presented to the TOE and successfully verified by it,
					authenticates the user. The TOE may use the successful authentication of a user as an
					authorization to execute an action on its behalf, or to perform a requested operation on or with an
					SDO.<h:p/>
					This requirement specifies the TSF exercise an authentication mechanism from FIA_UAU.5 by
					which the TOE authenticates the identity of the user requesting the operation and the owner of the
					SDO which is an object in the operation. Such authentication is necessary to authorize it to operate
					with the SDOs. A user could present a unique authentication token. The TSF may accept
					authentication tokens with no further conditioning. The TSF validates the authentication token
					prior to granting the authorization to perform the requested operation with the SDO. The SDO
					security attribute SDO.Reauth determines whether or not the TOE may authenticate the user and
					the SDO owner only once or each time each time it operates with the SDO.<h:p/>
					The means of validation may vary based on the type of authentication token.<h:p/>
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>
		
		<f-component cc-id="fia_uau.5" name="Multiple Authentication Mechanisms">
			<f-element id="fia-uau-5e1">
				<title>
					The TSF shall provide 
					<selectables>
						<selectable>none</selectable>
						<selectable>authentication token mechanism</selectable>
						<selectable>cryptographic signature mechanism</selectable>
						<selectable><assignable>list of authentication mechanisms</assignable></selectable>
					</selectables> to support user authentication.
				</title>
			</f-element>
			<f-element id="fia-uau-5e2">
				<title>
					The TSF shall authenticate any user’s claimed identity according to the 
					<selectables>
						<selectable>all subject users and SDO owners shall successfully authenticate themselves using one of the
							mechanisms listed in FIA_UAU.5.1</selectable>
						<selectable>the Prove service shall not accept "none" as an authentication method</selectable>
						<selectable><assignable>rules describing how each authentication mechanism
							provides authentication</assignable></selectable>.
					</selectables>
				</title>
				<note role="application">
					This SFR describes the authentication mechanisms required for any user of any service as a
					precondition for providing authorization to execute the service. This includes the authentication
					of the owner of the SDOs of the service.
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>

		<f-component cc-id="fia-uau.6" name="Re-Authenticating">
			<f-element id="fia-uau-6e1">
				<title>
					The TSF shall re-authenticate the user <h:b>for access to an SDO</h:b> under the conditions:<h:br/>
					[<h:br/>
					<h:ol type="1">
						<h:li>Re-authentication and re-authorization by further successful completion of the
							authentication and authorization methods in FIA_UAU.2, in accordance with the value of
							the SDO.Reauth attribute of the SDO as follows:
							<h:ol type="a">
								<h:li>If SDO.Reauth has the value ‘each access’;</h:li>
								<h:li>if SDO.Reauth has the value 'policy' and the TSF determines that the TOE satisfies
									the policy for re-authentication and reauthorization</h:li>
							</h:ol>
						</h:li>
					</h:ol><h:br/>]
				</title>
				<note role="application">
					The allowed values for the SDO.Reauth attribute of an SDO are defined in FMT_MSA.3 and the
					SDO Attributes Initialization Table. The rules in FDP_ACF.1.2 and also ensure that the need for
					re-authorization has been checked before access to an SDO.<h:p/>
					An SDO.Reauth value of ‘none’ indicates that no authentication of the subject user nor of the SDO
					owners is necessary. It also indicates that no reauthorization for operations using the SDO is
					necessary.<h:p/>
					An SDO.Reauth value of policy indicates that there may be a more complicated set of
					circumstances that trigger a re-auth (re-authentication of the users and owners as well as reauthorization of the operation). This could be a policy of a time limit for which a user can use an
					SDO before re-authentication (e.g. 10 minutes or 24 hours). The ST should indicate the policies
					allowed, and how the TOE evaluates the policies. The ST should also indicate the location of those
					policies, and how the TOE protects the integrity of those policies.<h:p/>
					When the TSF binds a user to access an SDO, this means that the TSF has authenticated the user
					and that the TSF authorized the user to have the right to exercise one or more of the following
					actions: generate the SDO, modify the SDO, including its security attributes, use the SDO in a
					TOE operation, propagate or duplicate the SDO for use by a device external to the DSC, or destroy
					the SDO. The user may not have exclusive rights to exercise the operations listed.<h:p/>
					Policy as represented by the attributes in the SDO dictates whether or not a user must authenticate
					itself in order to authorize access to the SDO.<h:p/>
					It is possible that the attributes of some SDOs should remain unchanged, and that the attributes
					of other SDOs may be changed by authorized users. If this is the case, then the ST author should
					iterate this SFR and indicate in the TSS which SDOs apply to each iteration.<h:p/>
				</note>
				<aactivity>
					<no-tests/>
				</aactivity>
			</f-element>
		</f-component>
		
		</section>
		
    </sec:SFRs>
	
	
    <section title="Security Assurance Requirements" id="SARs">
      The Security Objectives in <xref to="Security_Objectives"/> were constructed
      to address threats identified in
      <xref to="Threats"/>. The Security Functional Requirements (SFRs)
      in <xref to="SFRs"/> are a formal instantiation of the Security Objectives. The PP
      identifies the Security Assurance Requirements (SARs) to frame the extent to
      which the evaluator assesses the documentation applicable for the evaluation and performs
      independent testing. <h:br/> This section lists the set of SARs from CC part 3
      that are required in evaluations against this PP. Individual Assurance Activities
      o be performed are specified both in 
      <xref to="SFRs"/> as well as in this section. <h:br/>
      The general model for evaluation of OSs against STs written to conform to this PP is as follows: <h:br/>
      After the  ST has been approved for evaluation, the TSEF will obtain the
        OS, supporting environmental IT, and the administrative/user guides for
      the OS. The ITSEF is expected to perform actions mandated by the Common Evaluation
      Methodology (CEM) for the ASE and ALC SARs. The ITSEF also performs the Assurance Activities
      contained within <xref to="SFRs"/>, which are intended to be an interpretation of the
      other CEM assurance requirements as they apply to the specific technology instantiated in the
      OS. The Assurance Activities that are captured in <xref to="SFRs"/> also provide
      clarification as to what the developer needs to provide to demonstrate the OS is compliant
      with the PP.
     <section title="Class ASE: Security Target" id="ase">As per ASE activities
        defined in <xref to="bibCEM"/>.</section>
      <section title="Class ADV: Development" id="adv">The information about the OS is contained in the guidance documentation available to the end user as
        well as the TSS portion of the ST. The OS developer must concur with the description of the product that is
        contained in the TSS as it relates to the functional requirements. The Assurance Activities
        contained in <xref to="SFRs"/> should provide the ST authors with
        sufficient information to determine the appropriate content for the TSS section.
          <a-component cc-id="adv_fsp.1" name="Basic Functional Specification (ADV_FSP.1)">The
          functional specification describes the TSFIs. It is not
          necessary to have a formal or complete specification of these interfaces. Additionally,
          because OSs conforming to this PP will necessarily have interfaces to
          the Operational Environment that are not directly invokable by OS
          users, there is little point specifying that such interfaces be described in and of
          themselves since only indirect testing of such interfaces may be possible. For this PP,
          the activities for this family should focus on understanding the interfaces presented in
          the TSS in response to the functional requirements and the interfaces
          presented in the AGD documentation. No additional “functional specification” documentation
          is necessary to satisfy the assurance activities specified. The interfaces that need to be
          evaluated are characterized through the information needed to perform the assurance
          activities listed, rather than as an independent, abstract list. 
            <a-element type="D">
              <title>The developer shall provide a functional specification.</title>
            </a-element>
            <a-element type="C">
              <title>The developer shall provide a tracing from the functional specification to the
              SFRs.</title>
              <note role="application">As indicated in the introduction to this section, the
              functional specification is comprised of the information contained in the AGD_OPE and
              AGD_PRE documentation. The developer may reference a website accessible to application
              developers and the evaluator. The assurance activities in the functional requirements
              point to evidence that should exist in the documentation and TSS
              section; since these are directly associated with the SFRs, the tracing in element
              ADV_FSP.1.2D is implicitly already done and no additional documentation is
              necessary.</note>
            </a-element>
	  
            <a-element type="C">
              <title>The functional specification shall describe the purpose and method of use for
              each SFR-enforcing and SFR-supporting TSFI.</title>
            </a-element>
            <a-element type="C">
              <title>The functional specification shall identify all parameters associated with each
              SFR-enforcing and SFR-supporting TSFI.</title>
            </a-element>
            <a-element type="C">
              <title>The functional specification shall provide rationale for the implicit
              categorization of interfaces as SFR-non-interfering.</title>
            </a-element>
            <a-element type="C">
              <title>
		The tracing shall demonstrate that the SFRs trace to 
		TSFIs in the functional specification.
	      </title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall determine that the functional specification is an accurate
              and complete instantiation of the SFRs.</title>
              <aactivity>There are no specific assurance activities associated with these SARs, except
              ensuring the information is provided. The functional specification documentation is
              provided to support the evaluation activities described in <xref to="SFRs"/>, and
              other activities described for AGD, ATE, and AVA SARs. The requirements on the content
              of the functional specification information is implicitly assessed by virtue of the
              other assurance activities being performed; if the evaluator is unable to perform an
              activity because there is insufficient interface information, then an adequate
              functional specification has not been provided.
	      </aactivity>
            </a-element>
	  
        </a-component>
      </section>
      <section id="agd" title="Class AGD: Guidance Documentation">The guidance documents will be
        provided with the ST. Guidance must include a description of how the IT
        personnel verifies that the Operational Environment can fulfill its role for the security
        functionality. The documentation should be in an informal style and readable by the IT
        personnel. Guidance must be provided for every operational environment that the product
        supports as claimed in the ST. This guidance includes instructions to
        successfully install the TSF in that environment; and Instructions to
        manage the security of the TSF as a product and as a component of the
        larger operational environment. Guidance pertaining to particular security functionality is
        also provided; requirements on such guidance are contained in the assurance activities
        specified with each requirement. 
	<a-component cc-id="agd_ope.1" name="Operational User Guidance (AGD_OPE.1)">
	    <a-element type="D">
	      <title>The developer shall provide operational user guidance.</title>
	      <note role="application">The operational user guidance does not have to be contained in a
	      single document. Guidance to users, administrators and application developers can be
              spread among documents or web pages. 
	      Rather than repeat information here, the developer should
              review the assurance activities for this component to ascertain the specifics of the
              guidance that the evaluator will be checking for. This will provide the necessary
              information for the preparation of acceptable guidance.</note>
            </a-element>
          
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, the
              user-accessible functions and privileges that should be controlled in a secure
              processing environment, including appropriate warnings.</title>
              <note role="application">User and administrator are to be considered in the definition
              of user role.</note>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, how to use the
              available interfaces provided by the OS in a secure manner.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall describe, for each user role, the available
              functions and interfaces, in particular all security parameters under the control of
              the user, indicating secure values as appropriate.</title>
              <note role="application">
		This portion of the operational user guidance should be presented
		in the form of a checklist that can be quickly executed by IT personnel (or end-users, 
		when necessary) and suitable for use in compliance activities.
		When possible, this guidance is to be expressed in the eXtensible Configuration 
		Checklist Description Format (XCCDF) to
		support security automation.  
		Minimally, it should be presented in a structured 
		format which includes a title for each configuration item, 
		instructions for achieving the secure configuration, and any relevant rationale.  
              </note>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall, for each user role, clearly present each
              type of security-relevant event relative to the user-accessible functions that need to
              be performed, including changing the security characteristics of entities under the
              control of the TSF.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall identify all possible modes of operation of
              the OS (including operation following failure or operational
              error), their consequences, and implications for maintaining secure operation.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall, for each user role, describe the security
              measures to be followed in order to fulfill the security objectives for the
              operational environment as described in the ST.</title>
            </a-element>
            <a-element type="C">
              <title>The operational user guidance shall be clear and reasonable.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence. </title>
              <aactivity>Some of the contents of the operational guidance are verified by the
              assurance activities in <xref to="SFRs"/> and evaluation of the OS according to the <xref to="bibCEM"/>. The following additional
              information is also required. If cryptographic functions are provided by the OS, the operational guidance shall contain instructions for configuring
              the cryptographic engine associated with the evaluated configuration of the OS. It shall provide a warning to the administrator that use of other
              cryptographic engines was not evaluated nor tested during the CC evaluation of the
              OS. The documentation must describe the process for verifying
              updates to the OS by verifying a digital signature – this may be
              done by the OS or the underlying platform. The evaluator will
              verify that this process includes the following steps: Instructions for obtaining the
              update itself. This should include instructions for making the update accessible to
              the OS (e.g., placement in a specific directory). Instructions for
              initiating the update process, as well as discerning whether the process was
              successful or unsuccessful. This includes generation of the hash/digital signature.
              The OS will likely contain security functionality that does not
              fall in the scope of evaluation under this PP. The operational guidance shall make it
              clear to an administrator which security functionality is covered by the evaluation
              activities. </aactivity>
          </a-element>
	  
        </a-component>
        <a-component cc-id="agd_pre.1" name="Preparative Procedures (AGD_PRE.1)">
            <a-element type="D">
              <title>The developer shall provide the OS, including its preparative
              procedures.</title>
              <note role="application">As with the operational guidance, the developer should look to
              the assurance activities to determine the required content with respect to preparative
              procedures.</note>
            </a-element>
	  
            <a-element type="C">
              <title>The preparative procedures shall describe all the steps necessary for secure
              acceptance of the delivered OS in accordance with the developer's
              delivery procedures.</title>
            </a-element>
            <a-element type="C">
              <title>The preparative procedures shall describe all the steps necessary for secure
              installation of the OS and for the secure preparation of the
              operational environment in accordance with the security objectives for the operational
              environment as described in the ST.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall apply the preparative procedures to confirm that the OS can be prepared securely for operation.</title>
              <aactivity>As indicated in the introduction above, there are significant expectations
              with respect to the documentation—especially when configuring the operational
              environment to support OS functional requirements. The evaluator
              shall check to ensure that the guidance provided for the OS
              adequately addresses all platforms claimed for the OS in the ST. </aactivity>
            </a-element>
	  
        </a-component>
      </section>
      <section id="alc" title="Class ALC: Life-cycle Support"> At the assurance level provided
        for OSs conformant to this PP, life-cycle support is limited to end-user-visible aspects of
        the life-cycle, rather than an examination of the OS vendor’s development and configuration
        management process. This is not meant to diminish the critical role that a developer’s
        practices play in contributing to the overall trustworthiness of a product; rather, it is a
        reflection on the information to be made available for evaluation at this assurance level.
          <a-component cc-id="alc_cmc.1" name="Labeling of the TOE (ALC_CMC.1)">This component is
          targeted at identifying the OS such that it can be distinguished from
          other products or versions from the same vendor and can be easily specified when being
          procured by an end user. 
            <a-element type="D">
              <title>The developer shall provide the OS and a reference for the
              OS.</title>
            </a-element>
	  
            <a-element type="C">
              <title>The OS shall be labeled with a unique reference.</title>
              <note role="application">Unique reference information includes: 
	      <h:ul>
		<h:li>OS Name</h:li>
		<h:li>OS Version</h:li>
		<h:li>OS Description</h:li>
		<h:li>Software Identification (SWID) tags, if available</h:li>
              </h:ul>
              </note>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
              <aactivity>The evaluator will check the ST to ensure that it contains
              an identifier (such as a product name/version number) that specifically identifies the
              version that meets the requirements of the ST. Further, the
              evaluator will check the AGD guidance and OS samples received for
              testing to ensure that the version number is consistent with that in the ST. If the vendor maintains a web site advertising the OS, the evaluator will examine the information on the web site to
              ensure that the information in the ST is sufficient to distinguish
              the product.</aactivity>
            </a-element>
	  
        </a-component>
        <a-component cc-id="alc_cms.1" name="TOE CM Coverage (ALC_CMS.1)">
	  Given the scope of the OS and its associated evaluation 
	  evidence requirements, this component’s assurance activities are covered 
	  by the assurance activities listed for ALC_CMC.1.
            <a-element type="D">
              <title>
		The developer shall provide a configuration list for the  OS.
	      </title>
            </a-element>
	  
            <a-element type="C">
              <title>The configuration list shall include the following: the OS
              itself; and the evaluation evidence required by the SARs.</title>
            </a-element>
            <a-element type="C">
              <title>The configuration list shall uniquely identify the configuration items.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
              <aactivity>The "evaluation evidence required by the SARs" in this PP is limited to the
              information in the ST coupled with the guidance provided to
              administrators and users under the AGD requirements. By ensuring that the OS is specifically identified and that this identification is
              consistent in the ST and in the AGD guidance (as done in the
              assurance activity for ALC_CMC.1), the evaluator implicitly confirms the information
              required by this component. Life-cycle support is targeted aspects of the developer’s
              life-cycle and instructions to providers of applications for the developer’s devices,
              rather than an in-depth examination of the TSF manufacturer’s
              development and configuration management process. This is not meant to diminish the
              critical role that a developer’s practices play in contributing to the overall
              trustworthiness of a product; rather, it’s a reflection on the information to be made
              available for evaluation. <h:br/> The evaluator will ensure that the developer has
              identified (in guidance documentation for application developers concerning the
              targeted platform) one or more development environments appropriate for use in
              developing applications for the developer’s platform. For each of these development
              environments, the developer shall provide information on how to configure the
              environment to ensure that buffer overflow protection mechanisms in the environment(s)
              are invoked (e.g., compiler and linker flags). The evaluator will ensure that this documentation
              also includes an indication of whether such protections are on by default, or have to
              be specifically enabled. The evaluator will ensure that the TSF is
              uniquely identified (with respect to other products from the TSF
              vendor), and that documentation provided by the developer in association with the
              requirements in the ST is associated with the TSF
              using this unique identification.</aactivity>
          </a-element>
	  
        </a-component>
        <a-component cc-id="alc_tsu_ext.1" name="Timely Security Updates"> This component requires the
          OS developer, in conjunction with any other necessary parties, to provide information as
          to how the end-user devices are updated to address security issues in a timely manner. The
          documentation describes the process of providing updates to the public from the time a
          security flaw is reported/discovered, to the time an update is released. This description
          includes the parties involved (e.g., the developer, carriers(s)) and the steps that are
          performed (e.g., developer testing, carrier testing), including worst case time periods,
          before an update is made available to the public. 
            <a-element type="D">
              <title>The developer shall provide a description in the TSS of how timely security
              updates are made to the OS.</title>
            </a-element>
            <a-element type="D">
              <title> The developer shall provide a description in the TSS of how users are notified
              when updates change security properties or the configuration of the product. </title>
            </a-element>
	  
            <a-element type="C">
              <title>The description shall include the process for creating and deploying security
              updates for the OS software.</title>
            </a-element>
            <a-element type="C">
              <title>The description shall include the mechanisms publicly available for reporting
              security issues pertaining to the OS.</title>
              <note> The reporting mechanism could include web sites, email addresses, as well as a
              means to protect the sensitive nature of the report (e.g., public keys that could be
              used to encrypt the details of a proof-of-concept exploit). </note>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator shall confirm that the information provided meets all
              requirements for content and presentation of evidence.</title>
              <aactivity> The evaluator will verify that the TSS contains a description of the timely
              security update process used by the developer to create and deploy security updates.
              The evaluator will verify that this description addresses the entire application. The
              evaluator will also verify that, in addition to the OS developer’s process, any
              third-party processes are also addressed in the description. The evaluator will also
              verify that each mechanism for deployment of security updates is described. <h:br/> The
              evaluator will verify that, for each deployment mechanism described for the update
              process, the TSS lists a time between public disclosure of a vulnerability and public
              availability of the security update to the OS patching this vulnerability, to include
              any third-party or carrier delays in deployment. The evaluator will verify that this
              time is expressed in a number or range of days. <h:br/> The evaluator will verify that
              this description includes the publicly available mechanisms (including either an email
              address or website) for reporting security issues related to the OS. The evaluator
              shall verify that the description of this mechanism includes a method for protecting
              the report either using a public key for encrypting email or a trusted channel for a
              website. </aactivity>
            </a-element>
	  
        </a-component>
      </section>
      <section id="ate" title="Class ATE: Tests">Testing is specified for functional aspects of
        the system as well as aspects that take advantage of design or implementation weaknesses.
        The former is done through the ATE_IND family, while the latter is through the AVA_VAN
        family. At the assurance level specified in this PP, testing is based on advertised
        functionality and interfaces with dependency on the availability of design information. One
        of the primary outputs of the evaluation process is the test report as specified in the
        following requirements. <a-component cc-id="ate_ind.1"
          name="Independent Testing – Conformance (ATE_IND.1)"> Testing is performed to confirm the
          functionality described in the TSS as well as the administrative
          (including configuration and operational) documentation provided. The focus of the testing
          is to confirm that the requirements specified in <xref to="SFRs"/> being met,
          although some additional testing is specified for SARs in <xref to="SARs"/>. The
          Assurance Activities identify the additional testing activities associated with these
          components. The evaluator produces a test report documenting the plan for and results of
          testing, as well as coverage arguments focused on the platform/OS
          combinations that are claiming conformance to this PP. Given the scope of the OS and its associated evaluation evidence requirements, this component’s
          assurance activities are covered by the assurance activities listed for ALC_CMC.1.
            <a-element type="D">
              <title>The developer shall provide the OS for testing.</title>
            </a-element>
	  
            <a-element type="C">
              <title>The OS shall be suitable for testing.</title>
            </a-element>
	  
            <a-element type="E">
              <title>The evaluator <h:i>shall confirm</h:i> that the information provided meets all
              requirements for content and presentation of evidence.</title>
            </a-element>
            <a-element type="E">
              <title>The evaluator shall test a subset of the TSF to confirm that
              the TSF operates as specified.</title>
              <note role="application">The evaluator will test the OS on the most current fully
              patched version of the platform.</note>
              <aactivity>The evaluator will prepare a test plan and report documenting the testing
              aspects of the system, including any application crashes during testing. The evaluator
              shall determine the root cause of any application crashes and include that information
              in the report. The test plan covers all of the testing actions contained in the 
              <xref to="bibCEM"/> and the body of this PP’s Assurance Activities. <h:br/> While it is
              not necessary to have one test case per test listed in an Assurance Activity, the
              evaluator must document in the test plan that each applicable testing requirement in
              the ST is covered. The test plan identifies the platforms to be
              tested, and for those platforms not included in the test plan but included in the
                ST, the test plan provides a justification for not testing the
              platforms. This justification must address the differences between the tested
              platforms and the untested platforms, and make an argument that the differences do not
              affect the testing to be performed. It is not sufficient to merely assert that the
              differences have no affect; rationale must be provided. If all platforms claimed in
              the ST are tested, then no rationale is necessary. The test plan
              describes the composition of each platform to be tested, and any setup that is
              necessary beyond what is contained in the AGD documentation. It should be noted that
              the evaluator is expected to follow the AGD documentation for installation and setup
              of each platform either as part of a test or as a standard pre-test condition. This
              may include special test drivers or tools. For each driver or tool, an argument (not
              just an assertion) should be provided that the driver or tool will not adversely
              affect the performance of the functionality by the OS and its
              platform. <h:br/> This also includes the configuration of the cryptographic engine to be
              used. The cryptographic algorithms implemented by this engine are those specified by
              this PP and used by the cryptographic protocols being evaluated (IPsec, TLS). The test
              plan identifies high-level test objectives as well as the test procedures to be
              followed to achieve those objectives. These procedures include expected results. <h:br/>
              The test report (which could just be an annotated version of the test plan) details
              the activities that took place when the test procedures were executed, and includes
              the actual results of the tests. This shall be a cumulative account, so if there was a
              test run that resulted in a failure; a fix installed; and then a successful re-run of
              the test, the report would show a “fail” and “pass” result (and the supporting
              details), and not just the “pass” result.</aactivity>
            </a-element>
	  
        </a-component>
      </section>
      <section id="ava" title="Class AVA: Vulnerability Assessment">For the first generation of
        this protection profile, the evaluation lab is expected to survey open sources to discover
        what vulnerabilities have been discovered in these types of products. In most cases, these
        vulnerabilities will require sophistication beyond that of a basic attacker. Until
        penetration tools are created and uniformly distributed to the evaluation labs, the
        evaluator will not be expected to test for these vulnerabilities in the OS. The labs will be expected to comment on the likelihood of these vulnerabilities given
        the documentation provided by the vendor. This information will be used in the development
        of penetration testing tools and for the development of future protection profiles.
        <a-component cc-id="ava_van.1" name="Vulnerability Survey (AVA_VAN.1)">
            <a-element type="D">
              <title>The developer shall provide the OS for testing.</title>
            </a-element>
	  
          <a-element type="C">
            <title>The OS shall be suitable for testing.</title>
          </a-element>
	  
          <a-element type="E">
            <title>The evaluator shall confirm that the information provided meets all requirements
              for content and presentation of evidence.</title>
          </a-element>
          <a-element type="E">
            <title>The evaluator shall perform a search of public domain sources to identify
              potential vulnerabilities in the OS.</title>
            <note role="application">Public domain sources include the Common Vulnerabilities 
              and Exposures (CVE) dictionary for publicly-known vulnerabilities.  Public domain
              sources also include sites which provide free checking of files for viruses.</note>
            <!-- their Usage statement does not permit us to mention VirusTotal by name without permission -->
          </a-element>
          <a-element type="E">
            <title>The evaluator shall conduct penetration testing, based on the identified
              potential vulnerabilities, to determine that the OS is resistant to
              attacks performed by an attacker possessing Basic attack potential.</title>
            <aactivity>The evaluator will generate a report to document their
              findings with respect to this requirement. This report could physically be part of the
              overall test report mentioned in ATE_IND, or a separate document. The evaluator
              performs a search of public information to find vulnerabilities that have been found
              in similar applications with a particular focus on network protocols the application
              uses and document formats it parses. 
              The evaluator documents the sources consulted and
              the vulnerabilities found in the report. 
              <h:br/>
              For each vulnerability found, the evaluator
              either provides a rationale with respect to its non-applicability, or the evaluator
              formulates a test (using the guidelines provided in ATE_IND) to confirm the
              vulnerability, if suitable. Suitability is determined by assessing the attack vector
              needed to take advantage of the vulnerability. If exploiting the vulnerability
              requires expert skills and an electron microscope, for instance, then a test would not
              be suitable and an appropriate justification would be formulated.</aactivity>
          </a-element>
	  
        </a-component>
      </section>      
    </section>
  </sec:Security_Requirements>

  <!-- 
       Do NOT put SFRs in this section. All SFR belong up above in SFR section. 
       To make an SFR optional tag it above as status="optional" 
  -->
  <appendix title="Optional Requirements" id="optional"> As indicated in <xref to="ccl"/>,
    the baseline requirements (those that must be performed by the OS) are
    contained in the body of this PP. Additionally, there are three other types of requirements
    specified in <xref to="optional"/>, <xref to="sel-based"/>, and <xref to="objective"/>.
    The first type (in this Appendix) are requirements that can be included
    in the ST, but are not required in order for a OS to claim conformance to
    this PP. The second type (in <xref to="sel-based"/>) are requirements based on selections
    in the body of the PP: if certain selections are made, then additional requirements in that
    appendix must be included. The third type (in <xref to="objective"/> are components that
    are not required in order to conform to this PP, but will be included in the baseline
    requirements in future versions of this PP, so adoption by vendors is encouraged. Note that the
    ST author is responsible for ensuring that requirements that may be associated with those in
      <xref to="optional"/>, <xref to="sel-based"/>, and <xref to="objective"/>
    but are not listed (e.g., FMT-type requirements) are also included in the ST. </appendix>

  <!-- 
       Do NOT put SFRs in this section. All SFR belong up above in SFR section. 
       To make an SFR optional tag it above as status="sel-based" 
  -->
  <appendix title="Selection-Based Requirements" id="sel-based"> As indicated in the introduction to
    this PP, the baseline requirements (those that must be performed by the OS or its underlying
    platform) are contained in the body of this PP. There are additional requirements based on
    selections in the body of the PP: if certain selections are made, then additional requirements
    below will need to be included. </appendix>

  <!-- 
       Do NOT put SFRs in this section. All SFR belong up above in SFR section. 
       To make an SFR optional tag it above as /"objective" 
  -->
  <appendix title="Objective Requirements" id="objective"> This appendix includes requirements that
    specify security functionality which also addresses threats. The requirements are not currently
    mandated in the body of this PP as they describe security functionality not yet widely-available
    in commercial technology. However, these requirements may be included in the ST such that the
    OS is still conformant to this PP, and it is expected that they be included as soon as
    possible. </appendix>

  <appendix title="Inherently Satisfied Requirements" id="satisfiedreqs"> This
	appendix lists requirements that should be considered satisfied by products
	successfully evaluated against this Protection Profile.  
	However, these requirements are not featured explicitly as SFRs and should not be
	included in the ST.  
	They are not included as standalone SFRs because it would
	increase the time, cost, and complexity of evaluation.  This approach is permitted
	by <xref g="CC"/> Part 1, <h:b>8.2 Dependencies between components</h:b>.
    <h:br/>
	This information benefits systems engineering activities which call for inclusion of 
	particular security controls.  Evaluation against the Protection Profile
	provides evidence that these controls are present and have been evaluated.
    <table xmlns="http://www.w3.org/1999/xhtml">
	<tr class="header">
	<td>Requirement</td>
	<td>Rationale for Satisfaction</td>
	</tr>
	<tr>
	<td>FIA_UAU.1 - Timing of authentication</td>
	<td>
	  FIA_AFL.1 implicitly requires that the OS perform all necessary actions, 
	  including those on behalf of the user who has not been authenticated, 
	  in order to authenticate;
	  therefore it is duplicative to include these actions as a 
	  separate assignment and test.
	</td>
	</tr>
	<tr>
	<td>FIA_UID.1 - Timing of identification</td>
	<td>
	  FIA_AFL.1 implicitly requires that the OS perform all necessary actions, 
	  including those on behalf of the user who has not been identified, 
	  in order to authenticate;
	  therefore it is duplicative to include these actions as a 
	  separate assignment and test.
	</td>
	</tr>
	<tr>
	<td>FMT_SMR.1 - Security roles</td>
	<td>
	  FMT_MOF_EXT.1 specifies role-based management functions that implicitly defines
	  user and privileged accounts; 
	  therefore, it is duplicative to include separate role requirements.
	</td>
	</tr>
	<tr>
	<td>FPT_STM.1 - Reliable time stamps</td>
	<td>
	  FAU_GEN.1.2 explicitly requires that the OS associate timestamps with audit records;
	  therefore it is duplicative to include a separate timestamp requirement.
	</td>
	</tr>
	<tr>
	<td>FTA_SSL.1 - TSF-initiated session locking</td>
	<td>
	  FMT_MOF_EXT.1 defines requirements for managing session locking;
	  therefore, it is duplicative to include a separate session locking requirement.
	</td>
	</tr>
	<tr>
	<td>FTA_SSL.2 - User-initiated locking</td>
	<td>
	  FMT_MOF_EXT.1 defines requirements for user-initiated session locking;
	  therefore, it is duplicative to include a separate session locking requirement.
	</td>
	</tr>
	<tr>
	<td>FAU_STG.1 - Protected audit trail storage</td>
	<td>
	  FPT_ACF_EXT.1 defines a requirement to protect audit logs;
	  therefore, it is duplicative to include a separate protection of audit trail requirements.
	</td>
	</tr>
	<tr>
	<td>FAU_GEN.2 - User identity association</td>
	<td>
	  FAU_GEN.1.2 explicitly requires that the OS record
	  any user account associated with each event; therefore, it is duplicative
	  to include a separate requirement to associate a user account with each
	  event.
	</td>
	</tr>
	<tr>
	  <td>FAU_SAR.1 - Audit review</td>
	  <td>
	    FPT_ACF_EXT.1.2 requires that audit logs (and other objects)
	    are protected from reading by unprivileged users; therefore, it is duplicative
	    to include a separate requirement to protect only the audit information.
	  </td>
	</tr>
    </table>

  </appendix>

  <!-- Remove this section if an Entropy Assessment is not needed -->
  <appendix title="References" id="biblio">
    <bibliography>
      <entry id="bibCEM">
        <tag>CEM</tag>
        <description>
          <h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CEMV3.1R4.pdf">Common
            Evaluation Methodology for Information Technology Security - Evaluation Methodology</h:a>,
          CCMB-2012-09-004, Version 3.1, Revision 4, September 2012. </description>
      </entry>
      <entry id="bibCESG">
        <tag>CESG</tag>
        <description>CESG - <h:a
            href="https://www.gov.uk/government/collections/end-user-devices-security-guidance"> End
            User Devices Security and Configuration Guidance</h:a></description>
      </entry>
      <entry id="bibCSA">
        <tag>CSA</tag>
        <description>
          <h:a href="http://csrc.nist.gov/groups/SMA/ispab/documents/csa_87.txt">Computer Security Act
            of 1987</h:a>, H.R. 145, June 11, 1987. </description>
      </entry>
      <entry id="bibOMB">
        <tag>OMB</tag>
        <description>
          <h:a href="http://www.whitehouse.gov/sites/default/files/omb/memoranda/fy2006/m06-19.pdf"
            >Reporting Incidents Involving Personally Identifiable Information and Incorporating the
            Cost for Security in Agency Information Technology Investments</h:a>, OMB M-06-19, July
          12, 2006. </description>
      </entry>
    </bibliography>
  </appendix>

  <appendix title="Acronyms" id="acronyms">
   <acronyms/>
  </appendix>

  <implements>
    <feature id="a-feature-id" title="Widget Thing">
      <description> This is a super description of this certain feature.</description>
    </feature>
  </implements>

</PP>
